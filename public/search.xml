<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>王道机试第二章《经典入门》——5.查找</title>
      <link href="/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%945-%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%945-%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<hr><p>PS：昨天偷懒了o(╥﹏╥)o，不能再这样了！<br>这一章比较简单，就只简单记录一下关键点。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于查找问题，有难有易。可能只是直接的对某个数字的查找，也可能涉及搜索等相对难度更大的算法。</p><blockquote><p>常用的查找方法:<font color=#FF0000>二分查找</font>——<strong>建立在查找元素排列有序的前提上</strong>。</p></blockquote><p>关于“查找”，有几个关键的概念：</p><a id="more"></a><ol><li>查找空间。<br> 也常被称为解空间。所谓查找，就是在该查找空间中找寻符合我们要求的解的过程。在例2.9中，整个数组包含的整数集就是查找空间。</li><li>查找目标。<br> 我们需要一个目标来判断查找空间中的各个元素是否符合我们的要求，以便判断查找活动是否已经成功。在例2.9中，即数组中的数字与目标数字是否相同。</li><li>查找方法。<br> 即利用某种特定的策略在查找空间中查找各个元素。不同的策略对查找的效率和结果有不同的影响，所以对于某个特定的问题，我们要选择切实可行的策略来查找解空间，以期事半功倍。在例2.9中，查找方法即线性地遍历数组。</li></ol><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>以在有序表{1,3,4,5,6,8,10}查找3为例，二分查找过程为：</p><ol><li>将查找开始点设为第一个数组元素(1)，结束点设为最后一个数组元素(10)，即查找子集为整个搜索空间{1,3,4,5,6,8,10}。</li><li>然后将起始点和结束点正中间的数与查找目标进行比较，若该中间数字等于目标数字则查找成功，查找结束；若大于查找目标，则说明查找目标只可能存在于查找子集中以该中间数字为界的较小的一半中，则移动查找结束点为该中间数字的前一个数字，即新的查找子集为旧的查找子集中以中间数字为界的较小的一半；若小于查找目标，则相应的得到新的查找子集为旧查找子集中以中间数字为界的较大的一半。在该例中，即目标数字3小于中间数字5，移动查找结束点至中间点（5）的前一个元素（4），新的查找子集为{1,3,4}，<strong style="color:#FF0000">然后继续步骤2</strong>。</li><li>若在查找过程中出现查找起始点大于查找结束点的情况，则说明查找子集已经为空集，查找失败。否则继续步骤2的查找过程。<blockquote><p>用二分查找查找长度为L的有序数组，时间复杂度可由原本线性查找的O（L）降低到O（logL）。</p></blockquote></li></ol><p>具体例子参见P39页例2.10。</p><h1 id="二分查找的另一类应用——定界"><a href="#二分查找的另一类应用——定界" class="headerlink" title="二分查找的另一类应用——定界"></a>二分查找的另一类应用——定界</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个升序有序的数组中，确定一个下标点，使在这个下标点之前（包括该下标点）的数字均小于等于目标数字（该目标数字一定大于等于数组中最小的数字），而数组的其余部分均大于目标数字。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/4 21:47</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存在一个升序有序的数组buf,其大小为size,目标数字为target</span></span><br><span class="line"><span class="keyword">int</span> base = <span class="number">0</span> , top = size; <span class="comment">//初始情况与二分查找一致</span></span><br><span class="line"><span class="keyword">while</span> (base &lt;= top) &#123; <span class="comment">//二分循环条件与二分查找一致</span></span><br><span class="line">    <span class="keyword">int</span> mid = (base + top) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (buf[mid] &lt;= target) base = mid + <span class="number">1</span>; <span class="comment">//符合前一部分数字规定</span></span><br><span class="line">    <span class="keyword">else</span> top = mid - <span class="number">1</span>; <span class="comment">//否则</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后,top即为我们要求的数字数组下标,buf[top]为该数字本身</span></span><br><span class="line"><span class="keyword">int</span> ans = top;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——4.排版题</title>
      <link href="/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88%E9%A2%98/"/>
      <url>/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>另外一种常见的题型，它不再把注意力放到处理输入的数据当中，而对输出作特别的关注。这类题型就是排版题，特别考察考生对于输出格式的把握。</p><blockquote><p><font color=#FF0000>排版题的两大种类：</font></p><ol><li>图形具有较强的规律性，且该规律顺序往往与输出顺序一致。我们只需仔细观察图形，把握其中所具有的规律，并将其量化后直接写入程序的输出部分，就可以输出题面所要求的图形。</li><li>所要求的图形不具有显著的规律性或者规律性较难直接应用到输出当中。对于此类排版题，常用的方法是<strong><font color=#FF0000>先完成排版，再进行输出</font></strong>。</li></ol></blockquote><a id="more"></a><h1 id="例2-7-输出梯形"><a href="#例2-7-输出梯形" class="headerlink" title="例2.7 输出梯形"></a>例2.7 输出梯形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一个高度h，输出一个高为h，上底边为h的梯形。</p></blockquote><p><img src="/GKNL.github.io/GKNL.github.io/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88/pasted-0.png" alt="玖涯博客"></p><h1 id="例2-8-叠筐"><a href="#例2-8-叠筐" class="headerlink" title="例2.8 叠筐"></a><font color=#FF0000>例2.8 叠筐</font></h1><p>不同于规律性较强的例2.7，有另一个类排版题，它所要求的图形不具有显著的规律性或者规律性较难直接应用到输出当中。为了解决此类问题，我们需要了解排版题常用的另一种方法：<strong>先完成排版，再进行输出</strong>。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/GKNL.github.io/GKNL.github.io/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88/pasted-1.png" alt="玖涯博客"></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如此例所示，其输出图形的规律性主要体现在由内而外的各个环上，而这与我们的输出顺序又不太契合（从上至下，从左至右）<br>于是我们不容易将该图形存在的规律直接应用到输出当中，所以我们需要使用刚才所提到的办法——先排版后输出。并在排版（而不是输出）时利用我们观察到的“环形规律”完成排版。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>为了达到先排版再输出的目的，我们利用一个<strong>缓存数组</strong>来对要输出的结果进行缓存</p></blockquote><p>我们对该字符阵列的坐标作如下规定，规定阵列左上角字符坐标为（1，1)，阵列右下角字符坐标为（n，n），其它坐标可由此推得。程序按照由<font color=#FF0000>最内圈至最外圈</font>的的顺序来完成图形的排列。<br>在完成每圈排列时，我们都需要注意两个要点：</p><blockquote><ul><li>首先需要确定该圈左上角的坐标。我们将以这个坐标为参照点来完成该圈的其它字符位置的确定。观察图形得知，最中间圈的左上角字符坐标为(n/2 + 1,n/2 + 1)，次中间圈的左上角字符坐标为（n/2 + 1- 1,n/2 + 1 - 1),，依次类推即可得到图形中每一个圈的参照点。</li><li>其次，我们需要计算该圈每边边长长度。这也较容易得出，中心圈长度为1，次中心圈长度为3，依次类推，外圈总比内圈长度增加2。</li></ul></blockquote><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><hr><ol><li><strong>明确该圈使用哪一个字符来填充</strong>，我们使用判断循环次数指示变量j的奇偶性来判断当前需要使用的字符，即奇数次循环时（j为奇数）时使用第一个字符，偶数次循环时使用第二个字符。</li><li><strong>确定当前圈左上角字符的坐标</strong>，我们使用中心坐标（n / 2 + 1，n / 2 + 1）减去当前循环次数指示变量j来确定该圈左上角坐标，即（n / 2 + 1- j,n / 2 + 1 - j)。</li><li><strong>计算当前圈边长长度</strong>，我们利用初始值为1的循环指示变量i来表示边长长度，并在每次循环结束后加2，代表边长由1开始，每外移一个圈边长长度即加上2。</li><li>完成所有圈的编排后，我们只需按照题目的需要<strong>去除四个角的字符</strong>，最后将整个输出缓存中的字符阵列输出即可。</li></ol><hr><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> outPutBuf[<span class="number">82</span>][<span class="number">82</span>]; <span class="comment">//用于预排版的输出缓存</span></span><br><span class="line">    <span class="keyword">char</span> a , b; <span class="comment">//输入的两个字符</span></span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">//叠框大小(最外圈边长)</span></span><br><span class="line">    <span class="keyword">bool</span> firstCase = <span class="literal">true</span>; <span class="comment">//是否为第一组数据标志，初始值为true</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d %c %c"</span>,&amp;n,&amp;a,&amp;b) == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//若是第一组数据，将第一组数据标志标记成false，否则输出换行</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这一段代码的含义是：题目要求每组叠筐图形之间需要有一行空行</span></span><br><span class="line"><span class="comment">         * 因此除第一个图形之外，其余每个图形输出前先输出一个换行符</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (firstCase == <span class="literal">true</span>) &#123; </span><br><span class="line">            firstCase = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//从里至外输出每个圈</span></span><br><span class="line">        <span class="comment">//i代表当前圈的周长,j代表圈数(从内向外计数,即最内圈j=1)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;i &lt;= n;i += <span class="number">2</span>,j ++) &#123; </span><br><span class="line">            <span class="keyword">int</span> x = n / <span class="number">2</span> + <span class="number">1</span> , y = x;</span><br><span class="line">            x -= j - <span class="number">1</span>; y -= j - <span class="number">1</span>; <span class="comment">//计算每个圈右上角点的坐标</span></span><br><span class="line">            <span class="keyword">char</span> c = j % <span class="number">2</span> == <span class="number">1</span> ? a : b; <span class="comment">//计算当前圈需要使用哪个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= i;k ++) &#123; <span class="comment">//对当前圈进行赋值</span></span><br><span class="line">                outPutBuf[x + k - <span class="number">1</span>][y] = c; <span class="comment">//左边赋值</span></span><br><span class="line">                outPutBuf[x][y + k - <span class="number">1</span>] = c; <span class="comment">//上边赋值</span></span><br><span class="line">                outPutBuf[x + i - <span class="number">1</span>][y + k - <span class="number">1</span>] = c; <span class="comment">//右边赋值</span></span><br><span class="line">                outPutBuf[x + k - <span class="number">1</span>][y + i - <span class="number">1</span>] = c; <span class="comment">//下边赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将四角置为空格,注意当n为1时不需此步骤!!!</span></span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            outPutBuf[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[n][<span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[<span class="number">1</span>][n] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[n][n] = <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出已经经过排版的在输出缓存中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>,outPutBuf[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>输出格式</strong><br> 题面要求我们在输出的每个叠筐间输出一个空行，即除了最后一个叠筐后没有多余的空行，其它叠筐输出完成后都需要额外的输出一个空行。</li><li><strong>边界数据处理</strong><br> 按上文所说，我们在输出缓存中完成字符阵列排版后，需要将该阵列四个角的字符修改为空格，但是这一修改不是一定需要的。<br> 当输入的n为1时，该修改会变得多余，它会使输出仅变为一个空格，这与题面要求不符。因此，在进行该修改之前，我们需要对n的数值作出判断，若其不为1则进行修改，否则跳过修改部分。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——3.Hash的应用</title>
      <link href="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一节中，我们将一个日期对应的预处理数据存储在一个以该日期的年月日为下标的三维数组中。</p><blockquote><p><font color=#FF0000>这种将存储位置与数据本身对应起来的存储手段就是Hash。</font></p></blockquote><a id="more"></a><h1 id="例2-5-统计同成绩学生人数"><a href="#例2-5-统计同成绩学生人数" class="headerlink" title="例2.5 统计同成绩学生人数"></a>例2.5 统计同成绩学生人数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/GKNL.github.io/GKNL.github.io/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94/pasted-0.png" alt="玖涯博客"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>在开始具体解题之前，我们要注意这类问题存在的一个共同特点：<strong>输入的分数种类是有限的</strong>。<br>在此例中，我们可以看到，输入的分数不仅严格在0到100的区间之内，同时它又一定是一个整数。这样，输入的数据一共只有101种可能，我们只要为这101种可能分别计数，便能在输入结束时便得知每一种分数的重复情况。<br><strong>初始时，我们将数组初始化为0，代表着每一个分数出现的次数都是0。当开始输入分数时，我们依据输入的分数x，累加代表其出现次数的数组元素Hash[x]，从而统计其重复次数。</strong></p><h1 id="例2-6-Sort"><a href="#例2-6-Sort" class="headerlink" title="例2.6 Sort"></a>例2.6 Sort</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/GKNL.github.io/GKNL.github.io/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94/pasted-1.png" alt="玖涯博客"></p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>本例与上例有一个共同的特点：输入数量的有限性。该例题面限定了输入的数字一定是[-500000,500000]区间里的整数，且各不相同。若利用一个数组分别统计每一种数字是否出现，其空间复杂度依旧在题目的限定范围内。且统计出现数字当中较大的m个数字，也仅需要从尾至头遍历这个数组，其时间复杂度仍在百万数量级，复合题目要求。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 500000 <span class="comment">//偏移量,用于补偿实际数字与数组下标之间偏移(因为数组下标不能为负)</span></span></span><br><span class="line"><span class="keyword">int</span> Hash[<span class="number">1000001</span>]; <span class="comment">//Hash数组,记录每个数字是否出现,不出现为0,出现后被标记成1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d%d"</span>,&amp;n,&amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-500000</span>;i &lt;= <span class="number">500000</span>;i ++) &#123;</span><br><span class="line">            Hash[i + OFFSET] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="comment">//初始化,将每个数字都标记为未出现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            Hash[x + OFFSET] = <span class="number">1</span>; <span class="comment">//凡是出现过的数字,该数组元素均被设置成1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">500000</span>;i &gt;= <span class="number">-500000</span>;i --) &#123; <span class="comment">//输出前m个数</span></span><br><span class="line">            <span class="keyword">if</span> (Hash[i + OFFSET] == <span class="number">1</span>) &#123; <span class="comment">//若该数字在输入中出现</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i); <span class="comment">//输出该数字</span></span><br><span class="line">                m --; <span class="comment">//输出一个数字后,m减一,直至m变为0</span></span><br><span class="line">                <span class="keyword">if</span> (m != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>); <span class="comment">//注意格式,若m个数未被输出完毕,在输出的数字后紧跟一个空格</span></span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">//若m个数字已经被输出完毕,则在输出的数字后面紧跟一个换行,并跳出遍历循环</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>); </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们利用这个统计数组，将所有出现过的数字对应的数组元素都标记为1，而没有出现过的数字对应的数组元素都保持为0，当我们需要输出前m大个数字时，我们只需要从500000开始，<font color=#FF0000>降序遍历这个数组</font>，查找前m个被标记成1的数组元素输出其对应的数字即可。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>本例对输入数字做了“各不相同”的限定，试问假如去除这一限定，使输入数字可能存在重复，该Hash方法是否依旧可用？</p><blockquote><p>依然可用：</p><ol><li>如果题目要求重复的数字只需输出一个，则输入遍历时不管Hash[x]的值是多少，只管令Hash[x] = 1即可。</li><li>如果题目要求将重复的数字全部输出，只需要在输入遍历时将对应下标的Hash[x]值每次+1，输出时输出Hash[x]个数字即可。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——2.日期类问题</title>
      <link href="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该例题考察了日期类问题中最基本的问题——求两个日期间的天数差，即求分别以两个特定日期为界的日期区间的长度。<br>解决这类区间问题有一个统一的思想——<font color=#FF0000 >把原区间问题统一到起点确定的区间问题上去</font>。</p><a id="more"></a><h1 id="例2-3-日期差值"><a href="#例2-3-日期差值" class="headerlink" title="例2.3 日期差值"></a>例2.3 日期差值</h1><p>在该例中，我们把问题统一到特定日期与一个原点时间（如0000年1月1日）的天数差。<br>当要求两个特定的日期之间的天数差时，我们只要将它们与原点日期的<font color=#FF0000 >天数差相减</font>，便能得到这两个特定日期之间的天数差（必要时加绝对值）。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/GKNL.github.io/GKNL.github.io/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE/pasted-0.png" alt="玖涯博客"><br><img src="/GKNL.github.io/GKNL.github.io/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE/pasted-1.png" alt="玖涯博客"></p><p>日期类问题有一个特别需要注意的要点——闰年，每逢闰年2月将会有29天，这对我们计算天数势必会产生重大的影响。<br>这里，我们必须明确闰年的判断规则——当年数不能被100整除时若其能被4整除则为闰年，或者其能被400整除时也是闰年。用逻辑语言表达出来即为<code>Year % 100 != 0 &amp;&amp; Year % 4 == 0 || Year % 400 == 0</code>，当逻辑表达式为true时，其为闰年；反之则不是闰年。</p><blockquote><p>我们提供一个技巧——预处理。<br>我们可以在程序真正开始处理输入数据之前，预处理出所有日期与原点日期之间的天数差并保存起来。当数据真正开始输入时，我们只需要用O（1）的时间复杂度将保存的数据读出，稍加处理便能得到答案。值得一提的是，预处理也是空间换时间的重要手段。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义宏判断是否是闰年，方便计算每月天数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x % 100 != 0 &amp;&amp; x % 4 == 0 || x % 400 == 0 ? 1 : 0</span></span><br><span class="line"><span class="comment">//预存每月的天数,注意二月配合宏定义作特殊处理</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span> <span class="comment">//日期类,方便日期的推移</span></span><br><span class="line">    <span class="keyword">int</span> Day;</span><br><span class="line">    <span class="keyword">int</span> Month;</span><br><span class="line">    <span class="keyword">int</span> Year;</span><br><span class="line">    <span class="comment">//计算下一天的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Day ++;</span><br><span class="line">        <span class="keyword">if</span> (Day &gt; dayOfMonth[Month][ ISYEAP(Year) ]) &#123; <span class="comment">//若日数超过了当月最大日数</span></span><br><span class="line">            Day = <span class="number">1</span>;</span><br><span class="line">            Month ++; <span class="comment">//进入下一月</span></span><br><span class="line">            <span class="keyword">if</span> (Month &gt; <span class="number">12</span>) &#123; <span class="comment">//月数超过12</span></span><br><span class="line">                Month = <span class="number">1</span>;</span><br><span class="line">                Year ++; <span class="comment">//进入下一年</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="完整C-代码"><a href="#完整C-代码" class="headerlink" title="完整C++代码"></a>完整C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义宏判断是否是闰年，方便计算每月天数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x % 100 != 0 &amp;&amp; x % 4 == 0 || x % 400 == 0 ? 1 : 0</span></span><br><span class="line"><span class="comment">//预存每月的天数,注意二月配合宏定义作特殊处理</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//日期结构体,方便进行日期的推移计算</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Day;</span><br><span class="line">    <span class="keyword">int</span> Month;</span><br><span class="line">    <span class="keyword">int</span> Year;</span><br><span class="line">    <span class="comment">//计算下一天的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Day ++;</span><br><span class="line">        <span class="comment">//若日数超过了当月最大日数</span></span><br><span class="line">        <span class="keyword">if</span> (Day &gt; dayOfMonth[Month][ ISYEAP(Year) ]) &#123;</span><br><span class="line">            Day = <span class="number">1</span>;</span><br><span class="line">            Month ++; <span class="comment">//进入下一月</span></span><br><span class="line">            <span class="keyword">if</span> (Month &gt; <span class="number">12</span>) &#123; <span class="comment">//月数超过12</span></span><br><span class="line">                Month = <span class="number">1</span>;</span><br><span class="line">                Year ++; <span class="comment">//进入下一年</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">5001</span>][<span class="number">13</span>][<span class="number">32</span>]; <span class="comment">//全局变量:保存预处理的天数</span></span><br><span class="line"><span class="comment">//求绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Date tmp;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>; <span class="comment">//天数计数</span></span><br><span class="line">    tmp.Day = <span class="number">1</span>;</span><br><span class="line">    tmp.Month = <span class="number">1</span>;</span><br><span class="line">    tmp.Year = <span class="number">0</span>; <span class="comment">//初始化日期类对象为0年1月1日</span></span><br><span class="line">    <span class="comment">//默认日期不超过5000年</span></span><br><span class="line">    <span class="comment">//O(n)=5000年日期天数</span></span><br><span class="line">    <span class="keyword">while</span>(tmp.Year != <span class="number">5001</span>) &#123; </span><br><span class="line">        <span class="comment">//将该日与0年1月1日的天数差保存起来(使用了Hash的思想:将存储位置与数据本身对应起来的存储手段)</span></span><br><span class="line">        buf[tmp.Year][tmp.Month][tmp.Day] = cnt;</span><br><span class="line">        tmp.nextDay(); <span class="comment">//计算下一天日期</span></span><br><span class="line">        cnt ++; <span class="comment">//计数器累加，每经过一天计数器即+1，代表与原点日期的间隔又增加一天</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d1 , m1 , y1;</span><br><span class="line">    <span class="keyword">int</span> d2 , m2 , y2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%4d%2d%2d"</span>,&amp;y1,&amp;m1,&amp;d1) != EOF) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%4d%2d%2d"</span>,&amp;y2,&amp;m2,&amp;d2); <span class="comment">//读入要计算的两个日期</span></span><br><span class="line">        <span class="comment">//用预处理的数据计算两日期差值,注意需对其求绝对值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Abs(buf[y2][m2][d2] - buf[y1][m1][d1]) + <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码中的注意点：</p><ol><li>在保存某个特定日期与原点日期的天数差时，我们使用了三维数组，用年、月、日分别表示该数组下标，这便将日期本身与其存储地址联系了起来。</li><li>该例程的输入采用了某种技巧。因为题面规定用一个连续的八位数来代替日期，我们使用%4d来读取该八位数的前四位并赋值给代表年的变量，同理使用%2d%2d来读取其它后四位并两两赋值给月日。</li><li>我们将buf[5001][13][32]这个相对比较耗费内存的数组定义成全局变量。这是因为需要耗费大量的内存，若在main函数（其它函数也一样）之中定义该数组，其函数所可以使用的栈空间将不足以提供如此庞大的内存，出现<strong>栈溢出</strong>，导致程序异常终止。</li></ol></blockquote><p>我们也可以考虑一下，假如问题需要我们输出某个特定的日期，是那年的第几天，我们该怎样利用我们已经得到的数据来计算呢？<br>我们只需要<font color=#FF0000>用该日期与原点日期的天数减去那年元旦与原点日期</font>便可得知该日期是当年的第几天。</p><h1 id="例2-4-Day-of-week"><a href="#例2-4-Day-of-week" class="headerlink" title="例2.4 Day of week"></a>例2.4 Day of week</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>   We now use the Gregorian style of dating in Russia. The leap years are years with number divisible by 4 but not divisible by 100, or divisible by 400. For example, years 2004, 2180 and 2400 are leap. Years 2004, 2181 and 2300 are not leap.<br>    Your task is to write a program which will compute the day of week corresponding to a given date in the nearest past or in the future using today’s agreement about dating.</p></blockquote><p>其大意为，输入一个日期，要求输出该日期为星期几。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们照样可以利用上例的思路来解答该题。<br>星期几是以七为周期循环的，那么我们只需要知道：</p><ol><li>今天是星期几。</li><li>今天和所给定的那天相隔几天。</li></ol><p>利用其对7求余数，我们便可以轻易的知道所给定的那天是星期几了。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><p>在该例中，预处理部分与上例保持一致。依旧是处理出每个日期与原点日期之间的天数间隔。<br>然后计算该日期天数差与当前日期天数差之间的差值，用7对其去模（即求余数），通过”星期数组”得到具体星期几。</p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——1.排序</title>
      <link href="/2020/01/30/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/01/30/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="例2-2-成绩排序"><a href="#例2-2-成绩排序" class="headerlink" title="例2.2 成绩排序"></a>例2.2 成绩排序</h1><blockquote><p><font color=#FF0000 >关键点：使用C++的Sort函数解题(注意重写cmp函数)</font></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort函数的两个参数代表待排序内存的起始地址和结束地址</span></span><br><span class="line"><span class="comment">//在此例中起始地址为buf，结束地址为buf+n</span></span><br><span class="line">sort (buf,buf + n);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/GKNL.github.io/GKNL.github.io/2020/01/30/%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92/pasted-0.png" alt="玖涯博客"></p><h2 id="C-解法"><a href="#C-解法" class="headerlink" title="C++解法"></a>C++解法</h2><ol><li>解法一：重写cmp()函数<blockquote><p>补充：关于<a href="http://c.biancheng.net/view/1407.html" target="_blank" rel="noopener">C++结构体</a></p></blockquote></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体E</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line">E buf[<span class="number">1000</span>];<span class="comment">//声明结构体数组buf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义sort函数的比较规则</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(E a,E b)</span></span>&#123;</span><br><span class="line">    <span class="comment">//按分数升序排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.score != b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//int strcmp(const char *str1, const char *str2) 把 str1 所指向的字符串和 str2 所指向的字符串进行比较</span></span><br><span class="line">    <span class="comment">//如果返回值 &lt; 0，则表示 str1 小于 str2;如果返回值 &gt; 0，则表示 str1 大于 str2</span></span><br><span class="line">    <span class="comment">//如果返回值=0，则表示str1等于str2</span></span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">strcmp</span>(a.name,b.name);</span><br><span class="line">    <span class="keyword">if</span>(tmp!=<span class="number">0</span>) <span class="keyword">return</span> tmp&lt;<span class="number">0</span>;<span class="comment">//若分数相同，则按名字字典序升序排列(字典序小者在前)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.age &lt; b.age;<span class="comment">//若分数、名字均相同，则按年龄升序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF)&#123;</span><br><span class="line">        <span class="comment">//输入并赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,buf[i].name,&amp;buf[i].age,&amp;buf[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用sort函数进行排序操作(注意第三个参数:cmp函数)</span></span><br><span class="line">        sort(buf,buf+n,cmp);</span><br><span class="line">        <span class="comment">//输出排序后的结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>,buf[i].name,buf[i].age,buf[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果忽略了第三个参数，那么系统会以不知道排序规则为由（找不到合适的“小于”运算符）而给出编译错误。由此，得到了第二种解法。</p><ol start="2"><li>解法二：重载”&lt;”运算符</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用C++算符重载直接定义小于运算符</span></span><br><span class="line"><span class="comment">//注意这里函数的参数：结构体普遍使用引用传递(值传递需要完全地对其进行复制，消耗时间与空间)</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> E &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(score != b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> score &lt; b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">strcmp</span>(name,b.name);</span><br><span class="line">    <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> tmp &lt; <span class="number">0</span>;<span class="comment">//若分数相同，则按名字字典序升序排列(字典序小者在前)</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age&lt;b.age;<span class="comment">//若分数、名字均相同，则按年龄升序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/14/hello-world/"/>
      <url>/2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
