<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>王道机试第五章《图论》——2.并查集</title>
      <link href="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本节中所讨论的<strong>并查集</strong>使用到的数据结构为<font color=#FF0000>数组</font></p></blockquote><p>这种数据结构用来表示集合信息，用以实现如</p><ul><li>确定<strong>某个集合含有哪些元素</strong></li><li>判断某两个元素<strong>是否存在同一个集合中</strong></li><li>求集合中<strong>元素的数量</strong></li></ul><p>等问题。</p><a id="more"></a><h1 id="双亲节点表示法"><a href="#双亲节点表示法" class="headerlink" title="双亲节点表示法"></a>双亲节点表示法</h1><p>我们用一棵树上的结点来表示在一个集合中的数字，要判断两个数字是否在一个集合中，我们只需判断它们<u>是否在同一棵树中</u>。<br>那么我们使用<strong>双亲结点表示法</strong>来表示一棵树，即<font color=#FF0000>每个结点保存其双亲结点</font>。若用数组来表示该树，则得到如下结果：</p><p><img src="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5/pasted-0.png" alt="玖涯博客"><br>我们在数组单元i中保存<strong>结点i的双亲结点编号</strong>，若该结点已经是<em>根结点</em>则其双亲结点信息保存为<strong>-1</strong>。</p><blockquote><p>有了这样的存储结构，我们就能通过<strong>不断地求双亲结点来找到该结点所在树的根结点</strong></p></blockquote><p>若两个元素所在树的<strong>根结点相同</strong>，则可以判定它们<font color=#FF0000>在同一棵树上</font>，它们同属一个集合。</p><h1 id="合并两个集合"><a href="#合并两个集合" class="headerlink" title="合并两个集合"></a>合并两个集合</h1><p>合并两个集合，只需要让分别代表两个集合的两棵树合并，合并方法为<strong>其中一棵树变为另一棵树根结点的子树</strong>，如下图所示：</p><p><img src="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5/pasted-1.png" alt="玖涯博客"><br>如图，若我们对2所在的集合与0所在的集合合并，则先找到表示2所在集合的树的根结点1和表示0所在集合的树的根结点4，<strong>并使其中之一（图中为4）为另一个根结点的儿子结点</strong>，这样其中一棵树变为另一棵树根结点的一棵新子树，完成合并。<br>在双亲结点表示法中，该合并过程为：</p><p><img src="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5/pasted-2.png" alt="玖涯博客"></p><blockquote><p>在树的双亲结点表示法中，两树的合并即表示为<strong>其中一棵树的根节的双亲结点变为<u>另一棵树</u>的根结点</strong>。</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先，我们定义一个数组，用双亲表示法来表示各棵树（所有的集合元素个数总和为N）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Tree[N];</span><br></pre></td></tr></table></figure><p>用Tree[i]来表示结点i的双亲结点，若Tree[i]为-1则表示该结点不存在双亲结点，即结点i为其所在树的根结点。<br>那么，为了查找结点x所在树的根结点，我们可以通过两种方式定义findRoot函数：</p><ol><li><strong>递归</strong>形式（常用）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Tree[x] == <span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> x; <span class="comment">//若当前结点为根结点则返回该结点号</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> findRoot(Tree[x]); <span class="comment">//否则递归查找其双亲结点的根结点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>非递归</strong>形式<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line">  <span class="keyword">while</span> (Tree[x] != <span class="number">-1</span>)</span><br><span class="line">  x = Tree[x]; <span class="comment">//若当前结点为非根结点则一直查找其双亲结点</span></span><br><span class="line">  ret = x; <span class="comment">//返回根结点编号</span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但是，采用这种策略而不加以任何约束,可能导致的后果是：<blockquote><p><strong>树高</strong>会随着集合之间的合并而不断地增加，查找根结点的耗时逐渐增大，极端情况下该树可能会退化成一个<u>单链表</u>。</p></blockquote></li></ol><p>在这种情况下，我们引入了<font color=#FF0000><strong>“路径压缩”</strong></font>这一优化方法。</p><h1 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h1><p>为了避免因为树的退化而产生额外的时间消耗，使其尽可能的保持较低的树高，<br>在合并两棵树的过程中，我们可以在<strong>查找某个特定结点的根结点时</strong>，同时将其与根结点之间<strong>所有的结点</strong>都<font color=#FF0000>直接指向根结点</font>，这个过程被称为<strong>路径压缩</strong>。</p><p><img src="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5/pasted-3.png" alt="玖涯博客"></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>修改以上所给的（两种）函数分别为：</p><ol><li><strong>递归</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Tree[x] == <span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = findRoot(Tree[x]);</span><br><span class="line">    Tree[x] = tmp; <span class="comment">//将当前结点的双亲结点设置为查找返回的根结点编号</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>非递归</strong>：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line">  <span class="keyword">int</span> tmp = x;</span><br><span class="line">  <span class="keyword">while</span> (Tree[x] != <span class="number">-1</span>)&#123;</span><br><span class="line">  x = Tree[x];</span><br><span class="line">  &#125;</span><br><span class="line">  ret = x;</span><br><span class="line">  x = tmp; <span class="comment">//再做一次从结点x到根结点的遍历</span></span><br><span class="line">  <span class="keyword">while</span>(Tree[x] != <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> t = Tree[x];</span><br><span class="line">    Tree[x] = ret;</span><br><span class="line">    x = t; <span class="comment">//遍历过程中将这些结点的双亲结点都设置为已经查找得到的根结点编号</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="例5-1-畅通工程"><a href="#例5-1-畅通工程" class="headerlink" title="例5.1 畅通工程"></a>例5.1 畅通工程</h1><blockquote><p>考察点：<font color=#FF0000>使用并查集求图中连通分量个数（即图中有几个集合）</font></p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p><strong>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？</strong></p></blockquote><p><img src="/2020/02/19/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%942-%E5%B9%B6%E6%9F%A5/pasted-4.png" alt="玖涯博客"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>该问题可以被抽象成在一个<strong>图上查找连通分量</strong>（彼此连通的结点集合）的个数，我们只需求得连通分量的个数，就能得到答案（新建多少条边来将这些连通分量连通）。</p><blockquote><p>这个问题可以使用<strong>并查集</strong>完成，初始时，每个结点都是孤立的连通分量，当读入已经建成的边后，我们将边的两个顶点所在集合合并，表示这两个集合中的所有结点已经连通。对所有的边重复该操作。</p></blockquote><p><strong>最后计算所有的结点被保存在几个集合中</strong>，即存在多少棵树就能得知共有多少个连通分量（集合）。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/19 23:58</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000</span></span><br><span class="line"><span class="keyword">int</span> Tree[N];</span><br><span class="line"><span class="comment">//查找某个结点所在树的根结点（！固定写法，牢记！！！）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (Tree[x] == <span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = findRoot(Tree[x]);</span><br><span class="line">        Tree[x] = tmp;<span class="comment">//路径压缩优化</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;n) != EOF &amp;&amp; n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="comment">//初始化Tree数组中每个元素为-1</span></span><br><span class="line">        <span class="comment">//因为初始时,所有结点都是孤立的集合,即其所在集合只有一个结点,其本身就是所在树根结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)&#123;</span><br><span class="line">            Tree[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读入边信息</span></span><br><span class="line">        <span class="keyword">while</span>(m -- != <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">int</span> a , b;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            a = findRoot(a);</span><br><span class="line">            b = findRoot(b); <span class="comment">//查找边的两个顶点所在集合信息</span></span><br><span class="line">            <span class="keyword">if</span> (a != b) Tree[a] = b; <span class="comment">//若两个顶点不在同一个集合则合并这两个集合!!!</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//统计所有结点中根结点的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Tree[i] == <span class="number">-1</span>) ans ++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans - <span class="number">1</span>); <span class="comment">//答案即为在ans个集合间再修建ans-1条道路即可使所有结点连通</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例5-2-More-is-better"><a href="#例5-2-More-is-better" class="headerlink" title="例5.2 More is better"></a>例5.2 More is better</h1><blockquote><p>考察点：<font color=#FF0000>使用并查集计算图中节点最多的树有多少个节点（即找到最大的集合，并计算集合大小）。</font></p></blockquote><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p><strong>有10000000个小朋友，他们之中有N对好朋友，且朋友关系具有传递性：若A与B是朋友，B与C是朋友，那么我们也认为A与C是朋友。<br>在给出这N对朋友关系后，要求我们找出一个最大（人数最多）的集合，该集合中任意两人之间都是朋友或者该集合中只有一个人，<em>输出该最大人数</em>。</strong></p></blockquote><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>为了计算每个集合的元素个数，我们不妨在表示<strong>每个集合的树的根结点</strong>记录该集合所包含的元素个数，在<strong>合并时累加</strong>被合并两个集合包含的元素个数。<br>最后，找出所有集合中所包含<strong>元素最多</strong>的集合即是所求。</p><h2 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/20 0:05</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000001</span></span><br><span class="line"><span class="keyword">int</span> Tree[N];</span><br><span class="line"><span class="comment">//查找结点x所在树的根结点(固定写法)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findRoot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (Tree[x] == <span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = findRoot(Tree[x]);</span><br><span class="line">        Tree[x] = tmp;<span class="comment">//路径压缩优化</span></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum[N]; <span class="comment">//用sum[i]表示以结点i为根的树的结点个数,其中保存数据仅当Tree[i]为-1即该结点为树的根结点时有效</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) &#123; <span class="comment">//初始化结点信息</span></span><br><span class="line">            Tree[i] = <span class="number">-1</span>; <span class="comment">//所有结点为孤立集合</span></span><br><span class="line">            sum[i] = <span class="number">1</span>; <span class="comment">//所有集合的元素个数为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n -- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> a , b;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">            a = findRoot(a);</span><br><span class="line">            b = findRoot(b);</span><br><span class="line">            <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">                Tree[a] = b;</span><br><span class="line">                sum[b] += sum[a]; <span class="comment">//合并两集时,将成为子树的树的根结点上保存的该集合元素个数的数字累加到合并后新树的树根</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;<span class="comment">//答案,答案至少为1。固这里先出初始化为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Tree[i] == <span class="number">-1</span> &amp;&amp; sum[i] &gt; ans) ans = sum[i]; <span class="comment">//统计最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从本例中应该得到启发:</p><blockquote><p>我们在使用并查集的同时也可以在表示集合的<strong>树的根结点</strong><font color=#0000FF>保存其它额外信息</font>，并且在集合合并的过程中维护该值，以便于求解某些集合问题。</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>就我个人现阶段刷题经历来讲，感觉并查集在“图”一类的题中在用处相当大。<br>以Leetcode上<a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener"><strong>200.岛屿数量</strong></a>为例，虽然看了半天才有思路，但是我的第一想法就是使用并查集来找出图中的连通分量个数，每个联通分量即为一个岛屿。<br>当然使用BFS和DFS来做也能够解出答案，而且好像更简洁（？）<br>不管，反正并查集是个好东西！</p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第五章《图论》——1.图的存储</title>
      <link href="/2020/02/12/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%941-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/"/>
      <url>/2020/02/12/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%941-%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>由于自己的贪玩和懒惰导致剩余时间不多了！因此先暂时跳过第四章《数学问题》，等把后三章解决完再回来。</p><h1 id="图的相关概念"><a href="#图的相关概念" class="headerlink" title="图的相关概念"></a>图的相关概念</h1><p>略</p><h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><blockquote><p>表示图有两种常用的数据结构：<font color=#FF0000><strong>邻接矩阵</strong>、<strong>邻接链表</strong></font>。</p></blockquote><a id="more"></a><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>邻接矩阵用一个二维数组来表示图的相关信息，即用<strong>二维数组</strong>单元edge[i][j]来表示结点i和结点j的关系。<br>若结点i和结点j之间存在边，我们用二维矩阵单元edge[i][j]来保存其权值，若结点i和结点j之间不存在边，则edge[i][j]为某约定的特殊字符（这里为-1）。</p><p><img src="/2020/02/12/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%941-%E5%9B%BE%E7%9A%84%E5%AD%98/pasted-0.png" alt="玖涯博客"></p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>若需遍历与某结点相邻的所有结点，就需依次<u>遍历二维数组中某行的所有元素</u>，判断其值后决定是否相邻，也就是说即使只有一个点与其相邻，我们也需要耗费大量的时间来遍历该行中所有的数组单元，时间利用率较低。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>用邻接矩阵来保存结点个数为n的图，其空间复杂度为O（n*n）。<br>当所要表示的图为稀疏图时该矩阵变为稀疏矩阵，大量的空间被浪费。</p><blockquote><p>所以，只有表示的图为<strong>稠密图</strong>，且<strong>频繁地判断某特定的结点对是否相邻</strong>时，使用邻接矩阵较为适宜。</p></blockquote><h2 id="邻接链表"><a href="#邻接链表" class="headerlink" title="邻接链表"></a>邻接链表</h2><p>邻接链表是一种链式存储结构，其为图的<strong>每个顶点</strong>建立一个<strong>单链表</strong>，第i个单链表中保存<font color=#0000FF>与结点Vi相邻的所有结点</font>（无向图）或所有以结点Vi为弧尾的弧指向的结点（有向图）及其相关信息。</p><p><img src="/2020/02/12/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8A%E5%9B%BE%E8%AE%BA%E3%80%8B%E2%80%94%E2%80%941-%E5%9B%BE%E7%9A%84%E5%AD%98/pasted-1.png" alt="玖涯博客"></p><blockquote><p>空间复杂度为：O（n（点的数量）+e（边的数量）</p></blockquote><h3 id="缺陷-1"><a href="#缺陷-1" class="headerlink" title="缺陷"></a>缺陷</h3><p>与邻接矩阵相比，当其需要判断结点Vi与Vj间是否存在关系时就显得比较繁琐，它需要遍历Vi和Vj（无向图时任选一个）所有的邻接结点，才能判定它们之间是否存在关系。</p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>若应用中存在<strong>大量遍历</strong>邻接结点的操作而<u>较少判断</u>两个特定结点的关系时，我们选用邻接链表较为适宜。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p><font color=#FF0000>这里，考虑到使用链表需要对其相当熟悉和熟练，因此推荐使用<strong>标准模板库（STL）中的标准模板std::vector</strong>。</font></p></blockquote><ul><li>边（edge）结构体声明：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> nextNode;<span class="comment">//下一个结点编号</span></span><br><span class="line"><span class="keyword">int</span> cost;<span class="comment">//该边的权重</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>我们为每一个结点都建立一个单链表来保存与其相邻的边权值和结点的信息。我们使用vector来模拟这些单链表，利用如下语句为每一个结点都建立一个vector对象（结点数量为N）。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">//声明使用标准命名空间</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; edge[N];</span><br></pre></td></tr></table></figure></li><li>单链表的初始化：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i ++) &#123; <span class="comment">//遍历所有结点</span></span><br><span class="line">edge[i].clear(); <span class="comment">//清空其单链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>向邻接矩阵中添加信息（调用vector::push_back(Edge)）：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edge tmp; <span class="comment">//准备一个Edge结构体</span></span><br><span class="line">tmp.nextNode = <span class="number">3</span>; <span class="comment">//下一结点编号为3</span></span><br><span class="line">tmp.cost = <span class="number">38</span>; <span class="comment">//该边权值为38</span></span><br><span class="line">edge[<span class="number">1</span>].push_back(tmp); <span class="comment">//将该边加入结点1的单链表中</span></span><br></pre></td></tr></table></figure></li><li>需要查询某个结点的所有邻接信息时，对vector进行遍历：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对edge[2]进行遍历,即对所有与结点2相邻的边进行遍历，edge[2].size()表示其大小</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; edge[<span class="number">2</span>].size();i ++) &#123; </span><br><span class="line"><span class="keyword">int</span> nextNode = edge[<span class="number">2</span>][i].nextNode; <span class="comment">//读出邻接结点</span></span><br><span class="line"><span class="keyword">int</span> cost = edge[<span class="number">2</span>][i].cost; <span class="comment">//读出该边权值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><blockquote><p>当我们需要<strong>删除</strong>某个单链表中的某些边信息时，我们调用<font color=FF0000>vector::erase</font>。<br>若我们要删除结点1的单链表中edge[1][i]所对应的边信息时，我们使用如下语句：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edge[<span class="number">1</span>].erase(edge[<span class="number">1</span>].begin() + i,edge[<span class="number">1</span>].begin() + i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//即vector.erase(vector.begin() + 第一个要删除的元素编号，vector.begin() + 最后一个要删除元素的编号 + 1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第三章《数据结构》——4.二叉排序树</title>
      <link href="/2020/02/11/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%944-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
      <url>/2020/02/11/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%944-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p><font color=#FF0000>二叉排序树（亦即二叉搜索树）</font>是一颗二叉树，并且对于树上任意一个结点，其上的数值必<strong>大于等于</strong>其<u>左子树</u>上任意结点数值，必<strong>小于等于</strong>其<u>右子树</u>上任意结点的数值。</p></blockquote><h2 id="建树思路"><a href="#建树思路" class="headerlink" title="建树思路"></a>建树思路</h2><p>对二叉排序树插入数字x：</p><ol><li>若当前树为空，则x为其根结点。</li><li>若当前结点大于x，则x插入其左子树；若当前结点小于x，则x插入其右子树；若当前结点等于x，则根据具体情况选择插入左右子树或者直接忽略。</li></ol><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>不同的插入顺序可能得到不同的二叉排序树形态</li><li>若对二叉排序树进行中序遍历，那么其遍历结果必然是一个递增序列。<br>  因此，通过建立二叉排序树就能对原无序序列<strong>进行排序</strong>，并实现动态维护。</li></ul><h1 id="C-代码：建立二叉排序树"><a href="#C-代码：建立二叉排序树" class="headerlink" title="C++代码：建立二叉排序树"></a>C++代码：建立二叉排序树</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/12 0:27</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function">Node *<span class="title">Insert</span><span class="params">(Node *T,<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//插入数字</span></span><br><span class="line">    <span class="keyword">if</span> (T == <span class="literal">NULL</span>) &#123; <span class="comment">//若当前树为空</span></span><br><span class="line">        T = creat(); <span class="comment">//建立结点</span></span><br><span class="line">        T -&gt; c = x; <span class="comment">//数字直接插入其根结点</span></span><br><span class="line">        <span class="keyword">return</span> T; <span class="comment">//返回根结点指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; T-&gt;c) <span class="comment">//若x小于根结点数值</span></span><br><span class="line">        T -&gt; lchild = Insert(T -&gt; lchild,x); <span class="comment">//插入到左子树上</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; T-&gt;c) <span class="comment">// 若x大于根结点数值</span></span><br><span class="line">        T -&gt; rchild = Insert(T -&gt; rchild,x); <span class="comment">//插入到右子树上.若根结点数值与x一样,根据题目要求直接忽略</span></span><br><span class="line">    <span class="keyword">return</span> T; <span class="comment">//返回根节点指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何判断两颗二叉树是否相同？"><a href="#如何判断两颗二叉树是否相同？" class="headerlink" title="如何判断两颗二叉树是否相同？"></a>如何判断两颗二叉树是否相同？</h1><p>由于<strong>一种遍历顺序并不能唯一的确定一棵二叉树</strong>，所以两棵不同的树的某一种遍历顺序是<em>可能相同</em>的。</p><blockquote><p><font color=#FF0000><strong>包括中序遍历在内</strong>的两种遍历结果可以唯一得确定一棵二叉树</font>。<br>我们只需对两棵树进行包括中序遍历在内的两种遍历，若两种遍历的结果都相同，那么就可以判定两棵树是完全相同的。</p></blockquote><h1 id="二叉排序树结点的删除"><a href="#二叉排序树结点的删除" class="headerlink" title="二叉排序树结点的删除"></a>二叉排序树结点的删除</h1><p><a href="https://www.cnblogs.com/alantu2018/p/8471854.html" target="_blank" rel="noopener">分为以下三种情况</a>：</p><blockquote><ol><li>要删除的是叶子结点：<br> 直接删除即可。</li><li>要删除的结点只有左子树或只有右子树：<br> 将它的左子树或右子树整个移动到删除结点的位置即可。</li><li>要删除的结点既有左子树又有右子树：<br> 找到需要删除的结点p的直接前驱（或直接后继）s，用s来替换结点p，然后再删除此结点s<br> 注意：这里的前驱和后继是指中序遍历时的顺序。<br>如下图所示</li></ol></blockquote><p><img src="/2020/02/11/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%944-%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F/pasted-0.png" alt="玖涯博客"></p><h1 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h1><p>本章主要讨论机试中有关数据结构的相关问题，主要涉及栈的两个应用——括号匹配和表达式求值、哈夫曼树的建立、二叉树和二叉排序树的相关操作。<br>数据结构在机试中考察的难度不大，牢记几个经典数据结构的应用和实现即可。</p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第三章《数据结构》——3.二叉树</title>
      <link href="/2020/02/07/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%943-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2020/02/07/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%943-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#0000FF>树</font> 是一种经常用到的数据结构，用来模拟具有树状结构性质的数据集合。<br>树里的每一个节点有一个根植和一个包含所有子节点的列表。<br>从图的观点来看，树也可视为一个拥有<strong>N个节点</strong>和<strong>N-1条边</strong>的一个有向无环图。</p><p><font color=#FF0000>二叉树</font>是一种更为典型的树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。</p><p>本节重点：</p><blockquote><ul><li>掌握树和二叉树的概念</li><li>熟悉不同的遍历方法</li><li>运用递归解决二叉树相关题目</li></ul></blockquote><a id="more"></a><h1 id="二叉树的表示"><a href="#二叉树的表示" class="headerlink" title="二叉树的表示"></a>二叉树的表示</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">     <span class="keyword">int</span> val;</span><br><span class="line">     TreeNode *left;</span><br><span class="line">     TreeNode *right;</span><br><span class="line">     TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>PS：书中原本使用的代码中没有写结构体的<em>构造方法</em>，而是使用的如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树结点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span> </span><br><span class="line">Node *lchild; <span class="comment">//左儿子指针</span></span><br><span class="line">Node *rchild; <span class="comment">//右儿子指针</span></span><br><span class="line"><span class="keyword">char</span> c; <span class="comment">//结点字符信息</span></span><br><span class="line">&#125;Tree[<span class="number">50</span>]; <span class="comment">//静态内存分配数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> loc; <span class="comment">//静态数组中已经分配的结点个数</span></span><br><span class="line"><span class="comment">//申请一个结点空间,返回指向其的指针</span></span><br><span class="line"><span class="function">Node *<span class="title">creat</span><span class="params">()</span> </span>&#123; </span><br><span class="line">Tree[loc].lchild = Tree[loc].rchild = <span class="literal">NULL</span>; <span class="comment">//初始化左右儿子为空</span></span><br><span class="line"><span class="keyword">return</span> &amp;Tree[loc ++]; <span class="comment">//返回指针,且loc累加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此代码(看起来像是C的代码…)并没有动态的申请内存空间，并在程序结束时释放这些空间。<br>而是使用了<strong>静态数组</strong>，利用分配数组元素给相应的结点实现内存分配。这是对内存分配较为简单的实现方法。</p></blockquote><hr><h1 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h1><h2 id="递归解法（java）"><a href="#递归解法（java）" class="headerlink" title="递归解法（java）"></a>递归解法（java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preOrder</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;<span class="comment">//可以把此判断条件去掉，但加上可以节省时间(好像?)</span></span><br><span class="line">            preOrder(node.left,list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            preOrder(node.right,list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">return</span> preOrder(root,list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h1><h2 id="递归解法（C-）"><a href="#递归解法（C-）" class="headerlink" title="递归解法（C++）"></a>递归解法（C++）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)&#123;<span class="comment">//一定注意对空节点的判断！！！（还有最好用root==nullptr对空指针进行判断）</span></span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(root-&gt;left);</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">        inorderTraversal(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="例3-4-二叉树遍历（还原二叉树）"><a href="#例3-4-二叉树遍历（还原二叉树）" class="headerlink" title="例3.4 二叉树遍历（还原二叉树）"></a>例3.4 二叉树遍历（还原二叉树）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/07/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%943-%E4%BA%8C%E5%8F%89/pasted-0.png" alt="玖涯博客"></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>该例题涉及<strong>二叉树的建立</strong>、<strong>由二叉树的两种遍历结果还原二叉树</strong>、<strong>二叉树的遍历</strong>等多种知识点。<br>由该例要求，</p><ol><li>首先需要根据给定的二叉树前序和中序遍历结果还原该二叉树。</li><li>其次，需要将还原的二叉树以二叉树的形式保存在内存中。</li><li>最后，需要对建立的二叉树进行后序遍历。</li></ol><h2 id="二叉树还原方法（前-中）"><a href="#二叉树还原方法（前-中）" class="headerlink" title="二叉树还原方法（前+中）"></a><font color=#FF0000>二叉树还原方法（前+中）</font></h2><blockquote><p>以<strong>前序</strong>遍历结果<font color=#FF0000><strong>XDAGFE</strong></font>，和<strong>中序</strong>遍历结果<font color=#FF0000><strong>ADGXFE</strong></font>为例</p></blockquote><p><img src="/2020/02/07/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%943-%E4%BA%8C%E5%8F%89/pasted-1.png" alt="玖涯博客"></p><p><img src="/2020/02/07/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%943-%E4%BA%8C%E5%8F%89/pasted-2.png" alt="玖涯博客"></p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/7 18:00</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//树结点结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    Node *lchild; <span class="comment">//左儿子指针</span></span><br><span class="line">    Node *rchild; <span class="comment">//右儿子指针</span></span><br><span class="line">    <span class="keyword">char</span> c; <span class="comment">//结点字符信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 18-23行是静态内存分配方法实现代码，</span></span><br><span class="line"><span class="comment"> * C++中可以直接在结构体中声明构造方法实现动态内存分配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node Tree[<span class="number">50</span>]; <span class="comment">//静态内存分配数组</span></span><br><span class="line"><span class="keyword">int</span> loc; <span class="comment">//静态数组中已经分配的结点个数</span></span><br><span class="line"><span class="function">Node *<span class="title">creat</span><span class="params">()</span> </span>&#123; <span class="comment">//申请一个结点空间,返回指向其的指针</span></span><br><span class="line">    Tree[loc].lchild = Tree[loc].rchild = <span class="literal">NULL</span>; <span class="comment">//初始化左右儿子为空</span></span><br><span class="line">    <span class="keyword">return</span> &amp;Tree[loc ++]; <span class="comment">//返回指针,且loc累加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str1[<span class="number">30</span>] , str2[<span class="number">30</span>]; <span class="comment">//保存前序和中序遍历结果字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node *T)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (T -&gt; lchild != <span class="literal">NULL</span>) &#123; <span class="comment">//若左子树不为空</span></span><br><span class="line">        postOrder(T -&gt; lchild); <span class="comment">//递归遍历其左子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (T -&gt; rchild != <span class="literal">NULL</span>) &#123; <span class="comment">//若右子树不为空</span></span><br><span class="line">        postOrder(T -&gt; rchild); <span class="comment">//递归遍历其右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,T -&gt; c); <span class="comment">//遍历该结点,输出其字符信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由字符串的前序遍历和中序遍历还原树,并返回其根节点,其中前序遍历结果为由str1[s1]到str2[e1]，中序遍历结果为str2[s2]到str2[e2]</span></span><br><span class="line"><span class="function">Node *<span class="title">build</span><span class="params">(<span class="keyword">int</span> s1,<span class="keyword">int</span> e1,<span class="keyword">int</span> s2,<span class="keyword">int</span> e2)</span> </span>&#123; </span><br><span class="line">    Node* ret = creat(); <span class="comment">//为该树根节点申请空间</span></span><br><span class="line">    ret -&gt; c = str1[s1]; <span class="comment">//该结点字符为前序遍历中第一个字符</span></span><br><span class="line">    <span class="keyword">int</span> rootIdx;</span><br><span class="line">    <span class="comment">//查找该根节点字符在中序遍历中的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s2;i &lt;= e2;i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2[i] == str1[s1]) &#123;</span><br><span class="line">            rootIdx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若左子树不为空</span></span><br><span class="line">    <span class="keyword">if</span> (rootIdx != s2) &#123; </span><br><span class="line">        ret -&gt; lchild = build(s1 + <span class="number">1</span>,s1 + (rootIdx - s2),s2,rootIdx - <span class="number">1</span>); <span class="comment">//递归还原其左子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若右子树不为空</span></span><br><span class="line">    <span class="keyword">if</span> (rootIdx != e2) &#123; </span><br><span class="line">        ret -&gt; rchild = build(s1 + (rootIdx - s2) + <span class="number">1</span>,e1,rootIdx + <span class="number">1</span>,e2); <span class="comment">//递归还原其右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret; <span class="comment">//返回根节点指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%s"</span>,str1) != EOF) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%s"</span>,str2); <span class="comment">//输入</span></span><br><span class="line">        loc = <span class="number">0</span>; <span class="comment">//初始化静态内存空间中已经使用结点个数为0</span></span><br><span class="line">        <span class="keyword">int</span> L1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line">        <span class="keyword">int</span> L2 = <span class="built_in">strlen</span>(str2); <span class="comment">//计算两个字符串长度</span></span><br><span class="line">        Node *T = build(<span class="number">0</span>,L1 - <span class="number">1</span>,<span class="number">0</span>,L2 - <span class="number">1</span>); <span class="comment">//还原整棵树,其根结点指针保存在T中</span></span><br><span class="line">        postOrder(T); <span class="comment">//后序遍历</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>); <span class="comment">//输出换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>在本段代码中，包括了<strong>建树、遍历、还原</strong>等多个二叉树相关的操作，几乎涉及了机试中二叉树的所有考点。<br>关于二叉树的其它考点，都与<u>二叉树的性质</u>有关，如<strong>每层的结点个数</strong>、<strong>确定结点个数的最小树高</strong>等。<br>对于这些考点，考生只需对理论知识有一定的把握即可，在编码上可以说没有任何难度。</p><h1 id="补充：关于C-动态分配和释放内存"><a href="#补充：关于C-动态分配和释放内存" class="headerlink" title="补充：关于C++动态分配和释放内存"></a>补充：关于C++动态分配和释放内存</h1><p><a href="http://c.biancheng.net/view/206.html" target="_blank" rel="noopener"><font color=#0000FF><strong>C++ new和delete（C++动态分配和释放内存）</strong></font></a></p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第三章《数据结构》——2.哈夫曼树</title>
      <link href="/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%942-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%942-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>使用数据结构<font color=#FF0000>堆</font>来辅助求解哈夫曼树，是求哈夫曼树的最佳选择。<br>学会求解哈夫曼树，还要学会在实际运用中确定哈夫曼树模型。<br>最经典的问题模型为<strong>哈夫曼编码</strong>、<strong>多个数的两两合并</strong>等。</p></blockquote><h2 id="几个关键概念"><a href="#几个关键概念" class="headerlink" title="几个关键概念"></a>几个关键概念</h2><ul><li><strong>路径</strong>：<br>  从任意一个结点到达另一个结点的通路。</li><li><strong>路径长度</strong>：<br>  该路径上所需经过的边的个数。</li><li><strong>结点的带权路径长度</strong>：<br>  从根结点到达该节点的路径长度再乘以该结点权值。</li><li><strong>树的带权路径长度和</strong>：<br>  树所有的叶子结点的带权路径长度和。</li><li><strong>哈夫曼树(最优树)</strong>：<br>  给定n个结点和它们的权值，以它们为叶子结点构造一棵带权路径和最小的二叉树。</li></ul><a id="more"></a><h2 id="哈夫曼树求法"><a href="#哈夫曼树求法" class="headerlink" title="哈夫曼树求法"></a>哈夫曼树求法</h2><ol><li>将所有结点放入集合K。</li><li>若集合K中剩余结点大于2个，则取出其中<font color=#FF0000>权值最小</font>的两个结点，构造他们同时为某个新节点的左右儿子，该新节点是他们共同的双亲结点，设定它的权值为其两个儿子结点的<strong>权值和</strong>。并将该父亲结点放入集合K。重复步骤2或3。</li><li>若集合K中仅剩余一个结点，该结点即为构造出的哈夫曼树数的根结点，<strong>所有构造得到的中间结点(即哈夫曼树上非叶子结点，<u>包括根节点</u>)的权值和</strong>即为该哈夫曼树的<strong>带权路径和</strong>。</li></ol><h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><p>为了方便快捷高效率的求得集合K中权值最小的两个元素，我们需要使用<a href="https://www.cnblogs.com/lanhaicode/p/10546257.html" target="_blank" rel="noopener"><strong><font color=#FF0000>堆</font>数据结构</strong></a>。它可以以O（logn）的复杂度取得n个元素中的最小元素。为了绕过对堆的实现，我们使用标准模板库中的相应的标准模板——<strong>优先队列</strong>。<br>它的定义与之前我们使用过的队列一样在标准模板库queue中，在使用它之前必须做相应预处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>利用语句<code>priority_queue&lt;int&gt; Q;</code>建立一个保存元素为int的堆Q，<br>但是请特别注意这样建立的堆其默认为<u>大顶堆</u>，即我们从堆顶取得的元素为整个堆中最大的元素。<br>而在求哈夫曼树中，我们恰恰需要取得堆中最小的元素，于是我们使用如下语句定义一个<strong>小顶堆</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里greater是指定的比较函数，默认为less(大顶堆)</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; , greater&lt;<span class="keyword">int</span>&gt; &gt; Q;</span><br></pre></td></tr></table></figure><p>关于堆的有关操作如下：<br><code>Q.push(x);</code><br>将元素x放入堆Q中。<br><code>int a = Q.top();</code><br>取出堆顶元素，即最小的元素保存在a中。<br><code>Q.pop();</code><br>弹出堆顶元素，取出后堆会自动调整为一个新的小顶堆。</p><h1 id="例3-3-哈夫曼树"><a href="#例3-3-哈夫曼树" class="headerlink" title="例3.3 哈夫曼树"></a>例3.3 哈夫曼树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%942-%E5%93%88%E5%A4%AB%E6%9B%BC/pasted-0.png" alt="玖涯博客"></p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/6 19:49</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//建立一个小顶堆</span></span><br><span class="line"><span class="comment">//这里greater是指定的比较函数，默认为less(大顶堆)</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; , greater&lt;<span class="keyword">int</span>&gt; &gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">while</span>(Q.empty() == <span class="literal">false</span>) Q.pop(); <span class="comment">//清空堆中元素</span></span><br><span class="line">        <span class="comment">//输入n个叶子结点权值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123; </span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            Q.push(x); <span class="comment">//将权值放入堆中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>; <span class="comment">//保存答案</span></span><br><span class="line">        <span class="keyword">while</span>(Q.size() &gt; <span class="number">1</span>) &#123; <span class="comment">//当堆中元素大于1个</span></span><br><span class="line">            <span class="keyword">int</span> a = Q.top();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">int</span> b = Q.top();</span><br><span class="line">            Q.pop(); <span class="comment">//取出堆中两个最小元素,他们为同一个结点的左右儿子,且该双亲结点的权值为它们的和</span></span><br><span class="line">            ans += a + b; <span class="comment">//该父亲结点必为非叶子结点,固累加其权值</span></span><br><span class="line">            Q.push(a + b); <span class="comment">//将该双亲结点的权值放回堆中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); <span class="comment">//输出答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第三章《数据结构》——1.栈的应用</title>
      <link href="/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%941-%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%941-%E6%A0%88%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><p>本章主要内容：<br>介绍机试题中涉及数据结构的部分，主要包括<strong>堆栈</strong>的应用、求<strong>哈夫曼树</strong>和<strong>二叉树</strong>的相关问题。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本节主要介绍栈两个方面的应用：</p><blockquote><ol><li><font color=#FF0000>括号匹配</font></li><li><font color=#FF0000>表达式求值</font></li></ol></blockquote><a id="more"></a><p>首先介绍C++标准模板库中的堆栈模板:<br>为了使用stack标准模板，我们要在文件头部包括相应的预处理</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><p>并声明使用标准命名空间。</p><p>我们用<br><code>stack&lt;int&gt; S;</code><br>定义一个保存元素类型为int的堆栈S，这样所有有关堆栈实现的内部操作，标准模板库都已经帮我们实现了。<br>使用<br><code>S.push(i);</code><br>向堆栈中压进一个数值为i的元素。<br>使用<br><code>int x = S.top();</code><br>读取栈顶元素，并将其值赋予变量x。<br>使用<br><code>S.pop();</code><br>弹出栈顶元素。</p><h1 id="例3-1-括号匹配问题"><a href="#例3-1-括号匹配问题" class="headerlink" title="例3.1 括号匹配问题"></a>例3.1 括号匹配问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/06/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8B%E2%80%94%E2%80%941-%E6%A0%88%E7%9A%84%E5%BA%94/pasted-1.png" alt="玖涯博客"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>由于每一个右括号，必定是与在其之前的所有未被匹配的左括号中最靠右的一个匹配。<br>因此：按照从左至右的顺序遍历字符串，并将遇到的<strong>所有左括号</strong>都放入堆栈中等待匹配；若在遍历过程中遇到一个右括号，由于按照从左向右的顺序遍历字符串，</p><blockquote><p>若此时堆栈<strong>非空</strong>，那么栈顶左括号即为与其匹配的左括号；<br>相反，若堆栈<strong>为空</strong>，则表示在其之前不存在未被匹配的左括号，<strong>匹配失败</strong>。</p></blockquote><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/6 17:37</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S; <span class="comment">//定义一个堆栈</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">110</span>]; <span class="comment">//保存输入字符串</span></span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">110</span>]; <span class="comment">//保存输出字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%s"</span>,str) != EOF) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="comment">//从左到右遍历字符串</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>;str[i] != <span class="number">0</span>;i ++) &#123;</span><br><span class="line">            <span class="comment">//若遇到左括号</span></span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">'('</span>) &#123; </span><br><span class="line">                S.push(i); <span class="comment">//将其数组下标放入堆栈中</span></span><br><span class="line">                ans[i] = <span class="string">' '</span>; <span class="comment">//暂且将对应的输出字符串位置改为空格</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若遇到右括号</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">                <span class="comment">//若此时堆栈非空</span></span><br><span class="line">                <span class="keyword">if</span> (S.empty() == <span class="literal">false</span>) &#123; </span><br><span class="line">                    S.pop(); <span class="comment">//栈顶位置左括号与其匹配,从栈中弹出该已经匹配的左括号</span></span><br><span class="line">                    ans[i] = <span class="string">' '</span>; <span class="comment">//修改输出中该位置为空格</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//若堆栈为空,则无法找到左括号与其匹配,修改输出中该位置为?</span></span><br><span class="line">                <span class="keyword">else</span> ans[i] = <span class="string">'?'</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若其为其它字符,与括号匹配无关，则修改输出字符串对应位置为空格</span></span><br><span class="line">            <span class="keyword">else</span> ans[i] = <span class="string">' '</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当字符串遍历完成后,尚留在堆栈中的左括号无法匹配</span></span><br><span class="line">        <span class="keyword">while</span>(!S.empty()) &#123; </span><br><span class="line">            ans[ S.top() ] = <span class="string">'$'</span>; <span class="comment">//修改无法匹配的左括号在输出中的位置为$</span></span><br><span class="line">            S.pop(); <span class="comment">//弹出</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = <span class="number">0</span>; <span class="comment">//为了使输出形成字符串，在其最后一个字符后添加一个空字符</span></span><br><span class="line">        <span class="built_in">puts</span>(str); <span class="comment">//输出原字符串</span></span><br><span class="line">        <span class="built_in">puts</span>(ans); <span class="comment">//输出答案字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号匹配，利用了从左往右遍历字符串时，栈顶的左括号离当前位置最近的特性完成工作。</p><h1 id="例3-2-简单计算器（表达式求值）"><a href="#例3-2-简单计算器（表达式求值）" class="headerlink" title="例3.2 简单计算器（表达式求值）"></a>例3.2 简单计算器（表达式求值）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><div>读入一个只包含 +, -, *, / 的非负整数计算表达式，计算该表达式的值。<br><strong>输入：</strong><br>测试输入包含若干测试用例，每个测试用例占一行，每行不超过200个字符,整数和运算符之间用一个空格分隔。没有非法表达式。当一行中只有0时输入结束，相应的结果不要输出。<br><strong>输出：</strong><br>对每个测试用例输出1行，即该表达式的值，精确到小数点后2位。</div>![玖涯博客](/2020/02/06/王道机试第三章《数据结构》——1-栈的应/pasted-2.png)<h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>设立两个栈，一个用来<strong>保存运算符</strong>，另一个用来<strong>保存数字</strong>。</li><li>在表达式首尾添加<em>标记运算符</em>，该运算符运算优先级最低。</li><li>从左至右依次遍历字符串，若遍历到运算符，则将其与运算符栈<strong>栈顶元素</strong>进行比较，若运算符栈栈顶运算符优先级<font color=#FF0000>小于</font>该运算符或者此时运算符栈<font color=#FF0000>为空</font>，则将该运算符<strong>压入</strong>堆栈。遍历字符串中下一个元素。</li><li>若运算符栈栈顶运算符优先级<font color=#FF0000>大于</font>该运算符，则<strong>弹出</strong>该栈顶运算符，再从数字栈中<strong>依次弹出两个栈顶数字</strong>，完成弹出的运算符对应的运算得到结果后，<strong>再将该结果压入数字栈</strong>，重复比较此时栈顶运算符与当前遍历到的运算符优先级，视其优先级大小<span style="border-bottom:2px dashed yellow;">重复步骤3或步骤4</span>。</li><li>若遍历到表达式中的数字，则直接压入数字栈。</li><li>若运算符堆栈中仅存有两个运算符且栈顶元素为我们人为添加的标记运算符，那么表达式运算结束，此时数字堆栈中唯一的数字即为表达式的值。</li></ol><h2 id="C-代码-1"><a href="#C-代码-1" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/6 18:14</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">220</span>]; <span class="comment">//保存表达式字符串</span></span><br><span class="line"><span class="comment">// 优先级矩阵,若mat[i][j] == 1，则表示i号运算符优先级大于j号运算符</span></span><br><span class="line"><span class="comment">// 运算符编码规则为+为1号，-为2号，*为3号，/为4号,我们人为添加在表达式首尾的标记,运算符为0号</span></span><br><span class="line"><span class="comment">// 我的想法：直接用数字表示操作数的优先级，需要比较时直接使用数字进行比较不就可以了？</span></span><br><span class="line"><span class="comment">// int getIndex(char oper) --&gt; 获取操作符所对应的优先级</span></span><br><span class="line"><span class="keyword">int</span> mat[][<span class="number">5</span>] = &#123;</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; op; <span class="comment">//运算符栈,保存运算符编号</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">double</span>&gt; in; <span class="comment">//数字栈,运算结果可能存在浮点数,所以保存元素为double</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得表达式中下一个元素函数:</span></span><br><span class="line"><span class="comment">// 若函数运行结束时,引用变量reto为true,则表示该元素为一个运算符,其编号保存在引用变量retn中；</span></span><br><span class="line"><span class="comment">// 否则，表示该元素为一个数字，其值保存在引用变量retn中.引用变量i表示遍历到的字符串下标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getOp</span><span class="params">(<span class="keyword">bool</span> &amp;reto,<span class="keyword">int</span> &amp;retn,<span class="keyword">int</span> &amp;i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//若此时遍历字符串第一个字符,且运算符栈为空,我们人为添加编号为0的标记字符</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; op.empty() == <span class="literal">true</span>) &#123;</span><br><span class="line">        reto = <span class="literal">true</span>; <span class="comment">//返回为运算符</span></span><br><span class="line">        retn = <span class="number">0</span>; <span class="comment">//编号为0</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若此时遍历字符为空字符,则表示字符串已经被遍历完</span></span><br><span class="line">    <span class="keyword">if</span> (str[i] == <span class="number">0</span>) &#123;</span><br><span class="line">        reto = <span class="literal">true</span>; <span class="comment">//返回为运算符</span></span><br><span class="line">        retn = <span class="number">0</span>; <span class="comment">//编号为0的标记字符</span></span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//若当前字符为数字</span></span><br><span class="line">    <span class="keyword">if</span> (str[i] &gt;= <span class="string">'0'</span> &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">        reto = <span class="literal">false</span>; <span class="comment">//返回为数字</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//否则返回为运算符</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        reto = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">'+'</span>) &#123; <span class="comment">//加号返回1</span></span><br><span class="line">            retn = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) &#123; <span class="comment">//减号返回2</span></span><br><span class="line">            retn = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'*'</span>) &#123; <span class="comment">//乘号返回3</span></span><br><span class="line">            retn = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'/'</span>) &#123; <span class="comment">//除号返回4</span></span><br><span class="line">            retn = <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">2</span>;<span class="comment">//i递增,    i=2是为了跳过该运算字符和该运算字符后的空格</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    retn = <span class="number">0</span>; <span class="comment">//返回结果为数字</span></span><br><span class="line">    <span class="comment">//若字符串未被遍历完,且下一个字符不是空格,则依次遍历其后数字,计算当前连续数字字符表示的数值</span></span><br><span class="line">    <span class="comment">//说白了就是：当前字符是个数字，但不知道是几位数，因为是一个字符一个字符读入的，因此需要把相邻的全部读入，再转换成数字</span></span><br><span class="line">    <span class="keyword">for</span> (;str[i] != <span class="string">' '</span> &amp;&amp; str[i] != <span class="number">0</span>;i ++) &#123;</span><br><span class="line">        retn *= <span class="number">10</span>;</span><br><span class="line">        retn += str[i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125; <span class="comment">//计算该数字的数字值</span></span><br><span class="line">    <span class="comment">//若其后字符为空格,则表示字符串未被遍历完</span></span><br><span class="line">    <span class="keyword">if</span> (str[i] == <span class="string">' '</span>)</span><br><span class="line">        i ++; <span class="comment">//i递增.跳过该空格</span></span><br><span class="line">    <span class="keyword">return</span>;<span class="comment">//返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输入字符串,当其位于文件尾时,gets返回0</span></span><br><span class="line">    <span class="keyword">while</span>(gets(str)) &#123; </span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'0'</span> &amp;&amp; str[<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">//若输入只有一个0,则退出</span></span><br><span class="line">        <span class="keyword">bool</span> retop;<span class="keyword">int</span> retnum; <span class="comment">//定义函数所需的引用变量</span></span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>; <span class="comment">//定义遍历到的字符串下标,初始值为0</span></span><br><span class="line">        <span class="keyword">while</span>(!op.empty()) op.pop();</span><br><span class="line">        <span class="keyword">while</span>(!in.empty()) in.pop(); <span class="comment">//清空数字栈,和运算符栈</span></span><br><span class="line">        <span class="comment">//循环遍历表达式字符串</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123; </span><br><span class="line">            getOp(retop,retnum,idx); <span class="comment">//获取表达式中下一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (retop == <span class="literal">false</span>) &#123; <span class="comment">//若该元素为数字</span></span><br><span class="line">                in.push((<span class="keyword">double</span>)retnum); <span class="comment">//将其压入数字栈中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">//否则</span></span><br><span class="line">                <span class="keyword">double</span> tmp;</span><br><span class="line">                <span class="comment">//若运算符堆栈为空或者当前遍历到的运算符优先级大于栈顶运算符,将该运算符压入运算符堆栈</span></span><br><span class="line">                <span class="keyword">if</span> (op.empty() == <span class="literal">true</span> || mat[retnum][op.top()] == <span class="number">1</span>) &#123;</span><br><span class="line">                    op.push(retnum);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">//否则</span></span><br><span class="line">                    <span class="comment">//只要当前运算符优先级小于栈顶元素运算符,则重复循环</span></span><br><span class="line">                    <span class="keyword">while</span>(mat[retnum][op.top()] == <span class="number">0</span>) &#123; </span><br><span class="line">                        <span class="keyword">int</span> ret = op.top(); <span class="comment">//保存栈顶运算符</span></span><br><span class="line">                        op.pop(); <span class="comment">//弹出</span></span><br><span class="line">                        <span class="keyword">double</span> b = in.top();</span><br><span class="line">                        in.pop();</span><br><span class="line">                        <span class="keyword">double</span> a = in.top();</span><br><span class="line">                        in.pop(); <span class="comment">//从数字堆栈栈顶弹出两个数字,依次保存在遍历a.b中</span></span><br><span class="line">                        <span class="keyword">if</span> (ret == <span class="number">1</span>) tmp = a + b;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">2</span>) tmp = a - b;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">3</span>) tmp = a * b;</span><br><span class="line">                        <span class="keyword">else</span> tmp = a / b; <span class="comment">//按照运算符类型完成运算</span></span><br><span class="line">                        in.push(tmp); <span class="comment">//将结果压回数字堆栈</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    op.push(retnum); <span class="comment">//将当前运算符压入运算符堆栈</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若运算符堆栈只有两个元素,且其栈顶元素为标记运算符,则表示表达式求值结束</span></span><br><span class="line">            <span class="keyword">if</span> (op.size() == <span class="number">2</span> &amp;&amp; op.top() == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,in.top()); <span class="comment">//输出数字栈中唯一的数字,即为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><strong>括号匹配要点</strong>：</p><blockquote><ol><li>需要一个栈存储待匹配的左括号</li><li>需要另一个数组保存匹配结果（”$”和”?”表示与之对应的左括号和右括号不能匹配）</li></ol></blockquote><p><strong>表达式求值要点</strong>：</p><blockquote><ol><li>需要两个栈，操作符栈和数字栈</li><li>算符优先级的表示</li></ol></blockquote><p>栈操作每次处理完后要判空，对留在栈里的元素进行判断</p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——6.贪心算法</title>
      <link href="/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%946-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%946-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>贪心算法，倒不如说是一种思想，一种总是选择“当前最好的选择”而不从整体上去把握的思想。但往往这种“贪心”的策略能得到接近最优的结果，甚至在某些情况下，这样就能得到最优解。<br>在机试题目中，根据题目可以推得多种的贪心策略，因此解题的关键在于：</p><blockquote><p><strong style="color:#FF0000">证明某种贪心的策略是正确的，是能够在该问题中得到最优解的，它才能被采用。</strong></p></blockquote><a id="more"></a><h1 id="例2-12-今年暑假不AC"><a href="#例2-12-今年暑假不AC" class="headerlink" title="例2.12 今年暑假不AC"></a>例2.12 今年暑假不AC</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%946-%E8%B4%AA%E5%BF%83%E7%AE%97/pasted-0.png" alt="玖涯博客"></p><p><img src="/2020/02/04/%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%946-%E8%B4%AA%E5%BF%83%E7%AE%97/pasted-0.png" alt="玖涯博客"></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><em>此题的贪心策略已不再像例2.11那么明显，需要我们自己推断并考虑哪一种贪心策略可以被应用到该题当中</em></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>首先来思考这样一个问题：<font color=#FF0000><strong>第一个节目应该选什么。</strong></font><br>可能会有以下猜测过程。</p><ol><li><del>选择开始时间最早的？</del><br> 假如有电视节目A[0,5]，B[1,2]，C[3,4]。显然，选择最先开始的节目并不一定能够得到最优解。</li><li><del>选择持续时间最短的？</del><br> 假如电视节目是这样安排的A[0,10]，B[11,20]，C[9,12]。显然，选择时间最短的节目也并不一定能够得到最优解。</li><li><strong>选择结束时间最早的？</strong><br> 这在以上两组案例中优先选择结束时间最早的节目是可以得到<strong>最优解</strong>的。那么它是否就真的是我们所需要的贪心策略？我们可以试着先来证明该命题：最优解中，第一个观看的节目一定是所有节目里结束时间最早的节目。因为按照优先选择结束时间最早的节目，我们所观看的第一个节目一定是所有节目里结束时间最早的。</li></ol><p>同样的我们用<strong>反证法</strong>来证明：</p><p>假设命题：最优解中，第一个观看的节目A[s1,e1]不是所有节目时间里结束时间最早的节目。即，存在节目B[s2,e2]，其中e2 &lt; e1。那么B节目一定不在该解当中，因为若在，其顺序一定在A节目之前，但是A节目已经被假定为第一个节目，所以B节目一定没被我们收看。<br>那么，我们可以将该解中的第一个节目A替换为B节目，该替换保证是合法的，即去除B节目以后，其它节目的播出时间一定不会与A节目冲突。做这样的替换以后，原解与当前解除了第一个节目不同（由节目B变为节目A），其它节目安排完全相同。那么这两组解所包含的节目数是一模一样的，该解也是最优解。</p><p>由以上证明可见，如果最优解的第一个节目并不是结束最早的节目，那么我们可以直接用结束时间最早的节目代替该解中的第一个节目，替换后的解也是最优解。这样，我们就可以得出当第一个节目选择所有节目中结束时间最早的节目，这样是一定不会得不到最优解的。于是，在我们所要求的最优解中，第一个被收看的节目可以安排所有节目中结束时间最早的节目（若有多个，则可任意选择一个）。<br>当第一个被收看的节目被决定了以后，那么第二个呢？只要不断重复上述证明过程，我们就会知道：</p><blockquote><p><strong>在选择第x（x&gt;=1）个节目时，一定是选择在收看完前x-1个节目后，其它所有可以收看节目中结束时间最早的节目，这就是我们要找的贪心策略。</strong></p></blockquote><p>在每次选择节目时，都不断的利用这种贪心策略，我们就能完成最优解的求解。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/4 23:09</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">program</span> &#123;</span> <span class="comment">//电视节目结构体</span></span><br><span class="line">    <span class="keyword">int</span> startTime; <span class="comment">//节目开始时间</span></span><br><span class="line">    <span class="keyword">int</span> endTime; <span class="comment">//节目结束时间</span></span><br><span class="line">    <span class="comment">//重载小于符号,保证sort函数能够按照结束时间升序排列</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> program &amp; A) <span class="keyword">const</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> endTime &lt; A.endTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;buf[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;n) != EOF) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d%d"</span>,&amp;buf[i].startTime,&amp;buf[i].endTime);</span><br><span class="line">        &#125; <span class="comment">//输入</span></span><br><span class="line">        <span class="comment">//按照结束时间升序排列</span></span><br><span class="line">        sort(buf,buf + n);</span><br><span class="line">        <span class="comment">//currentTime:当前阶段时间变量初始值;ans:答案计数初始值</span></span><br><span class="line">        <span class="keyword">int</span> currentTime = <span class="number">0</span> , ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//按照结束时间升序遍历所有的节目</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) &#123;</span><br><span class="line">            <span class="comment">//若当前时间小于等于该节目开始时间,那么收看该在剩余节目里结束时间最早的节目</span></span><br><span class="line">            <span class="keyword">if</span> (currentTime &lt;= buf[i].startTime) &#123;</span><br><span class="line">                currentTime = buf[i].endTime; <span class="comment">//当前时间变为该节目结束时间</span></span><br><span class="line">                ans ++; <span class="comment">//又收看了一个节目</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); <span class="comment">//输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——5.查找</title>
      <link href="/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%945-%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/02/04/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%945-%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<hr><p>PS：昨天偷懒了o(╥﹏╥)o，不能再这样了！<br>这一章比较简单，就只简单记录一下关键点。</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于查找问题，有难有易。可能只是直接的对某个数字的查找，也可能涉及搜索等相对难度更大的算法。</p><blockquote><p>常用的查找方法:<font color=#FF0000>二分查找</font>——<strong>建立在查找元素排列有序的前提上</strong>。</p></blockquote><p>关于“查找”，有几个关键的概念：</p><a id="more"></a><ol><li>查找空间。<br> 也常被称为解空间。所谓查找，就是在该查找空间中找寻符合我们要求的解的过程。在例2.9中，整个数组包含的整数集就是查找空间。</li><li>查找目标。<br> 我们需要一个目标来判断查找空间中的各个元素是否符合我们的要求，以便判断查找活动是否已经成功。在例2.9中，即数组中的数字与目标数字是否相同。</li><li>查找方法。<br> 即利用某种特定的策略在查找空间中查找各个元素。不同的策略对查找的效率和结果有不同的影响，所以对于某个特定的问题，我们要选择切实可行的策略来查找解空间，以期事半功倍。在例2.9中，查找方法即线性地遍历数组。</li></ol><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>以在有序表{1,3,4,5,6,8,10}查找3为例，二分查找过程为：</p><ol><li>将查找开始点设为第一个数组元素(1)，结束点设为最后一个数组元素(10)，即查找子集为整个搜索空间{1,3,4,5,6,8,10}。</li><li>然后将起始点和结束点正中间的数与查找目标进行比较，若该中间数字等于目标数字则查找成功，查找结束；若大于查找目标，则说明查找目标只可能存在于查找子集中以该中间数字为界的较小的一半中，则移动查找结束点为该中间数字的前一个数字，即新的查找子集为旧的查找子集中以中间数字为界的较小的一半；若小于查找目标，则相应的得到新的查找子集为旧查找子集中以中间数字为界的较大的一半。在该例中，即目标数字3小于中间数字5，移动查找结束点至中间点（5）的前一个元素（4），新的查找子集为{1,3,4}，<strong style="color:#FF0000">然后继续步骤2</strong>。</li><li>若在查找过程中出现查找起始点大于查找结束点的情况，则说明查找子集已经为空集，查找失败。否则继续步骤2的查找过程。<blockquote><p>用二分查找查找长度为L的有序数组，时间复杂度可由原本线性查找的O（L）降低到O（logL）。</p></blockquote></li></ol><p>具体例子参见P39页例2.10。</p><h1 id="二分查找的另一类应用——定界"><a href="#二分查找的另一类应用——定界" class="headerlink" title="二分查找的另一类应用——定界"></a>二分查找的另一类应用——定界</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个升序有序的数组中，确定一个下标点，使在这个下标点之前（包括该下标点）的数字均小于等于目标数字（该目标数字一定大于等于数组中最小的数字），而数组的其余部分均大于目标数字。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/4 21:47</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存在一个升序有序的数组buf,其大小为size,目标数字为target</span></span><br><span class="line"><span class="keyword">int</span> base = <span class="number">0</span> , top = size; <span class="comment">//初始情况与二分查找一致</span></span><br><span class="line"><span class="keyword">while</span> (base &lt;= top) &#123; <span class="comment">//二分循环条件与二分查找一致</span></span><br><span class="line">    <span class="keyword">int</span> mid = (base + top) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (buf[mid] &lt;= target) base = mid + <span class="number">1</span>; <span class="comment">//符合前一部分数字规定</span></span><br><span class="line">    <span class="keyword">else</span> top = mid - <span class="number">1</span>; <span class="comment">//否则</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后,top即为我们要求的数字数组下标,buf[top]为该数字本身</span></span><br><span class="line"><span class="keyword">int</span> ans = top;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——4.排版题</title>
      <link href="/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88%E9%A2%98/"/>
      <url>/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>另外一种常见的题型，它不再把注意力放到处理输入的数据当中，而对输出作特别的关注。这类题型就是排版题，特别考察考生对于输出格式的把握。</p><blockquote><p><font color=#FF0000>排版题的两大种类：</font></p><ol><li>图形具有较强的规律性，且该规律顺序往往与输出顺序一致。我们只需仔细观察图形，把握其中所具有的规律，并将其量化后直接写入程序的输出部分，就可以输出题面所要求的图形。</li><li>所要求的图形不具有显著的规律性或者规律性较难直接应用到输出当中。对于此类排版题，常用的方法是<strong><font color=#FF0000>先完成排版，再进行输出</font></strong>。</li></ol></blockquote><a id="more"></a><h1 id="例2-7-输出梯形"><a href="#例2-7-输出梯形" class="headerlink" title="例2.7 输出梯形"></a>例2.7 输出梯形</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入一个高度h，输出一个高为h，上底边为h的梯形。</p></blockquote><p><img src="/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88/pasted-0.png" alt="玖涯博客"></p><h1 id="例2-8-叠筐"><a href="#例2-8-叠筐" class="headerlink" title="例2.8 叠筐"></a><font color=#FF0000>例2.8 叠筐</font></h1><p>不同于规律性较强的例2.7，有另一个类排版题，它所要求的图形不具有显著的规律性或者规律性较难直接应用到输出当中。为了解决此类问题，我们需要了解排版题常用的另一种方法：<strong>先完成排版，再进行输出</strong>。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/02/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%944-%E6%8E%92%E7%89%88/pasted-1.png" alt="玖涯博客"></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如此例所示，其输出图形的规律性主要体现在由内而外的各个环上，而这与我们的输出顺序又不太契合（从上至下，从左至右）<br>于是我们不容易将该图形存在的规律直接应用到输出当中，所以我们需要使用刚才所提到的办法——先排版后输出。并在排版（而不是输出）时利用我们观察到的“环形规律”完成排版。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>为了达到先排版再输出的目的，我们利用一个<strong>缓存数组</strong>来对要输出的结果进行缓存</p></blockquote><p>我们对该字符阵列的坐标作如下规定，规定阵列左上角字符坐标为（1，1)，阵列右下角字符坐标为（n，n），其它坐标可由此推得。程序按照由<font color=#FF0000>最内圈至最外圈</font>的的顺序来完成图形的排列。<br>在完成每圈排列时，我们都需要注意两个要点：</p><blockquote><ul><li>首先需要确定该圈左上角的坐标。我们将以这个坐标为参照点来完成该圈的其它字符位置的确定。观察图形得知，最中间圈的左上角字符坐标为(n/2 + 1,n/2 + 1)，次中间圈的左上角字符坐标为（n/2 + 1- 1,n/2 + 1 - 1),，依次类推即可得到图形中每一个圈的参照点。</li><li>其次，我们需要计算该圈每边边长长度。这也较容易得出，中心圈长度为1，次中心圈长度为3，依次类推，外圈总比内圈长度增加2。</li></ul></blockquote><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><hr><ol><li><strong>明确该圈使用哪一个字符来填充</strong>，我们使用判断循环次数指示变量j的奇偶性来判断当前需要使用的字符，即奇数次循环时（j为奇数）时使用第一个字符，偶数次循环时使用第二个字符。</li><li><strong>确定当前圈左上角字符的坐标</strong>，我们使用中心坐标（n / 2 + 1，n / 2 + 1）减去当前循环次数指示变量j来确定该圈左上角坐标，即（n / 2 + 1- j,n / 2 + 1 - j)。</li><li><strong>计算当前圈边长长度</strong>，我们利用初始值为1的循环指示变量i来表示边长长度，并在每次循环结束后加2，代表边长由1开始，每外移一个圈边长长度即加上2。</li><li>完成所有圈的编排后，我们只需按照题目的需要<strong>去除四个角的字符</strong>，最后将整个输出缓存中的字符阵列输出即可。</li></ol><hr><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/2.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> outPutBuf[<span class="number">82</span>][<span class="number">82</span>]; <span class="comment">//用于预排版的输出缓存</span></span><br><span class="line">    <span class="keyword">char</span> a , b; <span class="comment">//输入的两个字符</span></span><br><span class="line">    <span class="keyword">int</span> n; <span class="comment">//叠框大小(最外圈边长)</span></span><br><span class="line">    <span class="keyword">bool</span> firstCase = <span class="literal">true</span>; <span class="comment">//是否为第一组数据标志，初始值为true</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d %c %c"</span>,&amp;n,&amp;a,&amp;b) == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">//若是第一组数据，将第一组数据标志标记成false，否则输出换行</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这一段代码的含义是：题目要求每组叠筐图形之间需要有一行空行</span></span><br><span class="line"><span class="comment">         * 因此除第一个图形之外，其余每个图形输出前先输出一个换行符</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (firstCase == <span class="literal">true</span>) &#123; </span><br><span class="line">            firstCase = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//从里至外输出每个圈</span></span><br><span class="line">        <span class="comment">//i代表当前圈的周长,j代表圈数(从内向外计数,即最内圈j=1)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;i &lt;= n;i += <span class="number">2</span>,j ++) &#123; </span><br><span class="line">            <span class="keyword">int</span> x = n / <span class="number">2</span> + <span class="number">1</span> , y = x;</span><br><span class="line">            x -= j - <span class="number">1</span>; y -= j - <span class="number">1</span>; <span class="comment">//计算每个圈右上角点的坐标</span></span><br><span class="line">            <span class="keyword">char</span> c = j % <span class="number">2</span> == <span class="number">1</span> ? a : b; <span class="comment">//计算当前圈需要使用哪个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= i;k ++) &#123; <span class="comment">//对当前圈进行赋值</span></span><br><span class="line">                outPutBuf[x + k - <span class="number">1</span>][y] = c; <span class="comment">//左边赋值</span></span><br><span class="line">                outPutBuf[x][y + k - <span class="number">1</span>] = c; <span class="comment">//上边赋值</span></span><br><span class="line">                outPutBuf[x + i - <span class="number">1</span>][y + k - <span class="number">1</span>] = c; <span class="comment">//右边赋值</span></span><br><span class="line">                outPutBuf[x + k - <span class="number">1</span>][y + i - <span class="number">1</span>] = c; <span class="comment">//下边赋值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将四角置为空格,注意当n为1时不需此步骤!!!</span></span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">            outPutBuf[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[n][<span class="number">1</span>] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[<span class="number">1</span>][n] = <span class="string">' '</span>;</span><br><span class="line">            outPutBuf[n][n] = <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出已经经过排版的在输出缓存中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>,outPutBuf[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><strong>输出格式</strong><br> 题面要求我们在输出的每个叠筐间输出一个空行，即除了最后一个叠筐后没有多余的空行，其它叠筐输出完成后都需要额外的输出一个空行。</li><li><strong>边界数据处理</strong><br> 按上文所说，我们在输出缓存中完成字符阵列排版后，需要将该阵列四个角的字符修改为空格，但是这一修改不是一定需要的。<br> 当输入的n为1时，该修改会变得多余，它会使输出仅变为一个空格，这与题面要求不符。因此，在进行该修改之前，我们需要对n的数值作出判断，若其不为1则进行修改，否则跳过修改部分。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——3.Hash的应用</title>
      <link href="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一节中，我们将一个日期对应的预处理数据存储在一个以该日期的年月日为下标的三维数组中。</p><blockquote><p><font color=#FF0000>这种将存储位置与数据本身对应起来的存储手段就是Hash。</font></p></blockquote><a id="more"></a><h1 id="例2-5-统计同成绩学生人数"><a href="#例2-5-统计同成绩学生人数" class="headerlink" title="例2.5 统计同成绩学生人数"></a>例2.5 统计同成绩学生人数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94/pasted-0.png" alt="玖涯博客"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>在开始具体解题之前，我们要注意这类问题存在的一个共同特点：<strong>输入的分数种类是有限的</strong>。<br>在此例中，我们可以看到，输入的分数不仅严格在0到100的区间之内，同时它又一定是一个整数。这样，输入的数据一共只有101种可能，我们只要为这101种可能分别计数，便能在输入结束时便得知每一种分数的重复情况。<br><strong>初始时，我们将数组初始化为0，代表着每一个分数出现的次数都是0。当开始输入分数时，我们依据输入的分数x，累加代表其出现次数的数组元素Hash[x]，从而统计其重复次数。</strong></p><h1 id="例2-6-Sort"><a href="#例2-6-Sort" class="headerlink" title="例2.6 Sort"></a>例2.6 Sort</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%943-Hash%E7%9A%84%E5%BA%94/pasted-1.png" alt="玖涯博客"></p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><p>本例与上例有一个共同的特点：输入数量的有限性。该例题面限定了输入的数字一定是[-500000,500000]区间里的整数，且各不相同。若利用一个数组分别统计每一种数字是否出现，其空间复杂度依旧在题目的限定范围内。且统计出现数字当中较大的m个数字，也仅需要从尾至头遍历这个数组，其时间复杂度仍在百万数量级，复合题目要求。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OFFSET 500000 <span class="comment">//偏移量,用于补偿实际数字与数组下标之间偏移(因为数组下标不能为负)</span></span></span><br><span class="line"><span class="keyword">int</span> Hash[<span class="number">1000001</span>]; <span class="comment">//Hash数组,记录每个数字是否出现,不出现为0,出现后被标记成1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n , m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%d%d"</span>,&amp;n,&amp;m) != EOF) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-500000</span>;i &lt;= <span class="number">500000</span>;i ++) &#123;</span><br><span class="line">            Hash[i + OFFSET] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="comment">//初始化,将每个数字都标记为未出现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            Hash[x + OFFSET] = <span class="number">1</span>; <span class="comment">//凡是出现过的数字,该数组元素均被设置成1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">500000</span>;i &gt;= <span class="number">-500000</span>;i --) &#123; <span class="comment">//输出前m个数</span></span><br><span class="line">            <span class="keyword">if</span> (Hash[i + OFFSET] == <span class="number">1</span>) &#123; <span class="comment">//若该数字在输入中出现</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i); <span class="comment">//输出该数字</span></span><br><span class="line">                m --; <span class="comment">//输出一个数字后,m减一,直至m变为0</span></span><br><span class="line">                <span class="keyword">if</span> (m != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>); <span class="comment">//注意格式,若m个数未被输出完毕,在输出的数字后紧跟一个空格</span></span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="comment">//若m个数字已经被输出完毕,则在输出的数字后面紧跟一个换行,并跳出遍历循环</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\n"</span>); </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们利用这个统计数组，将所有出现过的数字对应的数组元素都标记为1，而没有出现过的数字对应的数组元素都保持为0，当我们需要输出前m大个数字时，我们只需要从500000开始，<font color=#FF0000>降序遍历这个数组</font>，查找前m个被标记成1的数组元素输出其对应的数字即可。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>本例对输入数字做了“各不相同”的限定，试问假如去除这一限定，使输入数字可能存在重复，该Hash方法是否依旧可用？</p><blockquote><p>依然可用：</p><ol><li>如果题目要求重复的数字只需输出一个，则输入遍历时不管Hash[x]的值是多少，只管令Hash[x] = 1即可。</li><li>如果题目要求将重复的数字全部输出，只需要在输入遍历时将对应下标的Hash[x]值每次+1，输出时输出Hash[x]个数字即可。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——2.日期类问题</title>
      <link href="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该例题考察了日期类问题中最基本的问题——求两个日期间的天数差，即求分别以两个特定日期为界的日期区间的长度。<br>解决这类区间问题有一个统一的思想——<font color=#FF0000 >把原区间问题统一到起点确定的区间问题上去</font>。</p><a id="more"></a><h1 id="例2-3-日期差值"><a href="#例2-3-日期差值" class="headerlink" title="例2.3 日期差值"></a>例2.3 日期差值</h1><p>在该例中，我们把问题统一到特定日期与一个原点时间（如0000年1月1日）的天数差。<br>当要求两个特定的日期之间的天数差时，我们只要将它们与原点日期的<font color=#FF0000 >天数差相减</font>，便能得到这两个特定日期之间的天数差（必要时加绝对值）。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE/pasted-0.png" alt="玖涯博客"><br><img src="/2020/02/01/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%942-%E6%97%A5%E6%9C%9F%E7%B1%BB%E9%97%AE/pasted-1.png" alt="玖涯博客"></p><p>日期类问题有一个特别需要注意的要点——闰年，每逢闰年2月将会有29天，这对我们计算天数势必会产生重大的影响。<br>这里，我们必须明确闰年的判断规则——当年数不能被100整除时若其能被4整除则为闰年，或者其能被400整除时也是闰年。用逻辑语言表达出来即为<code>Year % 100 != 0 &amp;&amp; Year % 4 == 0 || Year % 400 == 0</code>，当逻辑表达式为true时，其为闰年；反之则不是闰年。</p><blockquote><p>我们提供一个技巧——预处理。<br>我们可以在程序真正开始处理输入数据之前，预处理出所有日期与原点日期之间的天数差并保存起来。当数据真正开始输入时，我们只需要用O（1）的时间复杂度将保存的数据读出，稍加处理便能得到答案。值得一提的是，预处理也是空间换时间的重要手段。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义宏判断是否是闰年，方便计算每月天数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x % 100 != 0 &amp;&amp; x % 4 == 0 || x % 400 == 0 ? 1 : 0</span></span><br><span class="line"><span class="comment">//预存每月的天数,注意二月配合宏定义作特殊处理</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line"><span class="number">31</span>,<span class="number">31</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span> <span class="comment">//日期类,方便日期的推移</span></span><br><span class="line">    <span class="keyword">int</span> Day;</span><br><span class="line">    <span class="keyword">int</span> Month;</span><br><span class="line">    <span class="keyword">int</span> Year;</span><br><span class="line">    <span class="comment">//计算下一天的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Day ++;</span><br><span class="line">        <span class="keyword">if</span> (Day &gt; dayOfMonth[Month][ ISYEAP(Year) ]) &#123; <span class="comment">//若日数超过了当月最大日数</span></span><br><span class="line">            Day = <span class="number">1</span>;</span><br><span class="line">            Month ++; <span class="comment">//进入下一月</span></span><br><span class="line">            <span class="keyword">if</span> (Month &gt; <span class="number">12</span>) &#123; <span class="comment">//月数超过12</span></span><br><span class="line">                Month = <span class="number">1</span>;</span><br><span class="line">                Year ++; <span class="comment">//进入下一年</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="完整C-代码"><a href="#完整C-代码" class="headerlink" title="完整C++代码"></a>完整C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by PM on 2020/2/1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 定义宏判断是否是闰年，方便计算每月天数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISYEAP(x) x % 100 != 0 &amp;&amp; x % 4 == 0 || x % 400 == 0 ? 1 : 0</span></span><br><span class="line"><span class="comment">//预存每月的天数,注意二月配合宏定义作特殊处理</span></span><br><span class="line"><span class="keyword">int</span> dayOfMonth[<span class="number">13</span>][<span class="number">2</span>] = &#123;</span><br><span class="line">        <span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">28</span>,<span class="number">29</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span>,</span><br><span class="line">        <span class="number">30</span>,<span class="number">30</span>,</span><br><span class="line">        <span class="number">31</span>,<span class="number">31</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//日期结构体,方便进行日期的推移计算</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> Day;</span><br><span class="line">    <span class="keyword">int</span> Month;</span><br><span class="line">    <span class="keyword">int</span> Year;</span><br><span class="line">    <span class="comment">//计算下一天的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Day ++;</span><br><span class="line">        <span class="comment">//若日数超过了当月最大日数</span></span><br><span class="line">        <span class="keyword">if</span> (Day &gt; dayOfMonth[Month][ ISYEAP(Year) ]) &#123;</span><br><span class="line">            Day = <span class="number">1</span>;</span><br><span class="line">            Month ++; <span class="comment">//进入下一月</span></span><br><span class="line">            <span class="keyword">if</span> (Month &gt; <span class="number">12</span>) &#123; <span class="comment">//月数超过12</span></span><br><span class="line">                Month = <span class="number">1</span>;</span><br><span class="line">                Year ++; <span class="comment">//进入下一年</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">5001</span>][<span class="number">13</span>][<span class="number">32</span>]; <span class="comment">//全局变量:保存预处理的天数</span></span><br><span class="line"><span class="comment">//求绝对值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Date tmp;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>; <span class="comment">//天数计数</span></span><br><span class="line">    tmp.Day = <span class="number">1</span>;</span><br><span class="line">    tmp.Month = <span class="number">1</span>;</span><br><span class="line">    tmp.Year = <span class="number">0</span>; <span class="comment">//初始化日期类对象为0年1月1日</span></span><br><span class="line">    <span class="comment">//默认日期不超过5000年</span></span><br><span class="line">    <span class="comment">//O(n)=5000年日期天数</span></span><br><span class="line">    <span class="keyword">while</span>(tmp.Year != <span class="number">5001</span>) &#123; </span><br><span class="line">        <span class="comment">//将该日与0年1月1日的天数差保存起来(使用了Hash的思想:将存储位置与数据本身对应起来的存储手段)</span></span><br><span class="line">        buf[tmp.Year][tmp.Month][tmp.Day] = cnt;</span><br><span class="line">        tmp.nextDay(); <span class="comment">//计算下一天日期</span></span><br><span class="line">        cnt ++; <span class="comment">//计数器累加，每经过一天计数器即+1，代表与原点日期的间隔又增加一天</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d1 , m1 , y1;</span><br><span class="line">    <span class="keyword">int</span> d2 , m2 , y2;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span> (<span class="string">"%4d%2d%2d"</span>,&amp;y1,&amp;m1,&amp;d1) != EOF) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">"%4d%2d%2d"</span>,&amp;y2,&amp;m2,&amp;d2); <span class="comment">//读入要计算的两个日期</span></span><br><span class="line">        <span class="comment">//用预处理的数据计算两日期差值,注意需对其求绝对值</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Abs(buf[y2][m2][d2] - buf[y1][m1][d1]) + <span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码中的注意点：</p><ol><li>在保存某个特定日期与原点日期的天数差时，我们使用了三维数组，用年、月、日分别表示该数组下标，这便将日期本身与其存储地址联系了起来。</li><li>该例程的输入采用了某种技巧。因为题面规定用一个连续的八位数来代替日期，我们使用%4d来读取该八位数的前四位并赋值给代表年的变量，同理使用%2d%2d来读取其它后四位并两两赋值给月日。</li><li>我们将buf[5001][13][32]这个相对比较耗费内存的数组定义成全局变量。这是因为需要耗费大量的内存，若在main函数（其它函数也一样）之中定义该数组，其函数所可以使用的栈空间将不足以提供如此庞大的内存，出现<strong>栈溢出</strong>，导致程序异常终止。</li></ol></blockquote><p>我们也可以考虑一下，假如问题需要我们输出某个特定的日期，是那年的第几天，我们该怎样利用我们已经得到的数据来计算呢？<br>我们只需要<font color=#FF0000>用该日期与原点日期的天数减去那年元旦与原点日期</font>便可得知该日期是当年的第几天。</p><h1 id="例2-4-Day-of-week"><a href="#例2-4-Day-of-week" class="headerlink" title="例2.4 Day of week"></a>例2.4 Day of week</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>   We now use the Gregorian style of dating in Russia. The leap years are years with number divisible by 4 but not divisible by 100, or divisible by 400. For example, years 2004, 2180 and 2400 are leap. Years 2004, 2181 and 2300 are not leap.<br>    Your task is to write a program which will compute the day of week corresponding to a given date in the nearest past or in the future using today’s agreement about dating.</p></blockquote><p>其大意为，输入一个日期，要求输出该日期为星期几。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们照样可以利用上例的思路来解答该题。<br>星期几是以七为周期循环的，那么我们只需要知道：</p><ol><li>今天是星期几。</li><li>今天和所给定的那天相隔几天。</li></ol><p>利用其对7求余数，我们便可以轻易的知道所给定的那天是星期几了。</p><h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><p>在该例中，预处理部分与上例保持一致。依旧是处理出每个日期与原点日期之间的天数间隔。<br>然后计算该日期天数差与当前日期天数差之间的差值，用7对其去模（即求余数），通过”星期数组”得到具体星期几。</p>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王道机试第二章《经典入门》——1.排序</title>
      <link href="/2020/01/30/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/01/30/%E7%8E%8B%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="例2-2-成绩排序"><a href="#例2-2-成绩排序" class="headerlink" title="例2.2 成绩排序"></a>例2.2 成绩排序</h1><blockquote><p><font color=#FF0000 >关键点：使用C++的Sort函数解题(注意重写cmp函数)</font></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort函数的两个参数代表待排序内存的起始地址和结束地址</span></span><br><span class="line"><span class="comment">//在此例中起始地址为buf，结束地址为buf+n</span></span><br><span class="line">sort (buf,buf + n);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="/2020/01/30/%E9%81%93%E6%9C%BA%E8%AF%95%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8A%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8%E3%80%8B%E2%80%94%E2%80%941-%E6%8E%92/pasted-0.png" alt="玖涯博客"></p><h2 id="C-解法"><a href="#C-解法" class="headerlink" title="C++解法"></a>C++解法</h2><ol><li>解法一：重写cmp()函数<blockquote><p>补充：关于<a href="http://c.biancheng.net/view/1407.html" target="_blank" rel="noopener">C++结构体</a></p></blockquote></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体E</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line">E buf[<span class="number">1000</span>];<span class="comment">//声明结构体数组buf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义sort函数的比较规则</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(E a,E b)</span></span>&#123;</span><br><span class="line">    <span class="comment">//按分数升序排序</span></span><br><span class="line">    <span class="keyword">if</span>(a.score != b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//int strcmp(const char *str1, const char *str2) 把 str1 所指向的字符串和 str2 所指向的字符串进行比较</span></span><br><span class="line">    <span class="comment">//如果返回值 &lt; 0，则表示 str1 小于 str2;如果返回值 &gt; 0，则表示 str1 大于 str2</span></span><br><span class="line">    <span class="comment">//如果返回值=0，则表示str1等于str2</span></span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">strcmp</span>(a.name,b.name);</span><br><span class="line">    <span class="keyword">if</span>(tmp!=<span class="number">0</span>) <span class="keyword">return</span> tmp&lt;<span class="number">0</span>;<span class="comment">//若分数相同，则按名字字典序升序排列(字典序小者在前)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.age &lt; b.age;<span class="comment">//若分数、名字均相同，则按年龄升序排列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n) != EOF)&#123;</span><br><span class="line">        <span class="comment">//输入并赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,buf[i].name,&amp;buf[i].age,&amp;buf[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用sort函数进行排序操作(注意第三个参数:cmp函数)</span></span><br><span class="line">        sort(buf,buf+n,cmp);</span><br><span class="line">        <span class="comment">//输出排序后的结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>,buf[i].name,buf[i].age,buf[i].score);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果忽略了第三个参数，那么系统会以不知道排序规则为由（找不到合适的“小于”运算符）而给出编译错误。由此，得到了第二种解法。</p><ol start="2"><li>解法二：重载”&lt;”运算符</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用C++算符重载直接定义小于运算符</span></span><br><span class="line"><span class="comment">//注意这里函数的参数：结构体普遍使用引用传递(值传递需要完全地对其进行复制，消耗时间与空间)</span></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> E &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(score != b.score)&#123;</span><br><span class="line">        <span class="keyword">return</span> score &lt; b.score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="built_in">strcmp</span>(name,b.name);</span><br><span class="line">    <span class="keyword">if</span>(tmp != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> tmp &lt; <span class="number">0</span>;<span class="comment">//若分数相同，则按名字字典序升序排列(字典序小者在前)</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age&lt;b.age;<span class="comment">//若分数、名字均相同，则按年龄升序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 王道考研机试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机试 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/14/hello-world/"/>
      <url>/2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
